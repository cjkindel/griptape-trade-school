{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"How we teach","text":""},{"location":"#projects","title":"Projects","text":"<p>We believe that the best learning experience is by creating with a clear goal. All our courses are project-based, meaning you're applying concepts in real-world scenarios, enhancing your understanding. </p>"},{"location":"#code-snippets","title":"Code Snippets","text":"<p>How can you learn coding without helpfuls snippets? We use actual code, with actual line numbers, highliting changes as you work your way through the class.</p> <pre><code># Run an agent\nagent.run(\"Teach me Griptape!\")\n</code></pre>"},{"location":"#text-video-whatever","title":"Text, Video, Whatever","text":"<p>Some concepts are taught best through text. Others through video. And still others require both.</p> <p>We're happy to provide all of it!</p>"},{"location":"#how-can-we-help","title":"How can we help?","text":"<p>We love any and all feedback!</p> <p>Do you have a new idea for a course? Drop us a line in our Discord, or log a rquest at Griptape Trade School Github!</p>"},{"location":"contributing/","title":"Contributions or Issues","text":""},{"location":"contributing/#contributing","title":"Contributing","text":"<p>We greatly appreciate contributions and help creating and maintaining courses and tutorials.</p>"},{"location":"contributing/#reports-and-issues","title":"Reports and Issues","text":"<p>The easiest way to contribute to these tutorials is through our public issue tracker. Feel free to submit bugs, request features or changes, or chat with us directly on Discord.</p>"},{"location":"courses/","title":"All Courses","text":""},{"location":"courses/#create-a-chatbot-using-griptape-personas","title":"Create a Chatbot using Griptape Personas","text":"<p>Take a deep dive into creating a conversational chatbot with an Agent using Griptape's Rulesets. Not only will our chatbot be able to engage in conversation, but it will also have the unique ability to embody different personalities.</p> <p> Take the course</p>"},{"location":"faq/","title":"Frequently Asked Questions","text":""},{"location":"100/","title":"100 Beginner - \"Kickflip\"","text":"<p>Dive into the world of Griptape in our Beginner courses, where we lay the groundwork for your coding journey. You'll explore the fundamentals of our Python library and familiarize yourself with core concepts that form the bedrock of Griptape. These courses are designed to equip you with a solid base, setting the stage for more advanced Griptape adventures.</p> <p>Why Kickflip?</p> <p>The kickflip, in skateboarding, is one of the first tricks a skater learns. It involves flipping the board in the air using a 'kick' motion with the foot. It's an essential move that forms the foundation for many other tricks, much like our Beginner courses which lay the groundwork for your journey with Griptape. This trick gets its name from the 'kick' action used to flip the board.</p>"},{"location":"200/","title":"200 Intermediate - \"Grind\"","text":"<p>Ready to put your foundational knowledge into practice? Welcome to our Intermediate courses, where we roll up our sleeves and dive into project-based learning. These courses are designed to combine core concepts with advanced features, paving the way for intriguing and complex solutions. Here, you'll apply your skills, gain insights, and experience firsthand how Griptape can elevate your projects.</p> <p>Why Grind?</p> <p>Grinding, in the world of skateboarding, refers to sliding along an edge (like a rail or curb) using the trucks of the skateboard. It's a step up from basic tricks, requiring a combination of balance, speed, and precision\u2014mirroring our Intermediate level where you'll apply and integrate core concepts of Griptape into more complex projects. The term 'grind' is derived from the scraping or 'grinding' sound and action produced during the trick.</p>"},{"location":"200/#courses","title":"Courses","text":"Course Description Multiple Personality Chatbot In this course, we will take a deep dive into creating a conversational chatbot with an Agent using Griptape's Rulesets. Not only will our chatbot be able to engage in conversation, but it will also have the unique ability to embody different personalities."},{"location":"200/chatbot-rulesets/","title":"Building a Conversational Chatbot with Personality Using Griptape's Rulesets","text":""},{"location":"200/chatbot-rulesets/#course-description","title":"Course Description","text":"<p>In this course, we will take a deep dive into creating a command-line interface (CLI) based conversational chatbot with an Agent using Griptape's Rulesets. Not only will our chatbot be able to engage in conversation, but it will also have the unique ability to embody different personalities, making the interaction more dynamic and interesting. </p> <p>You will get hands-on experience working with Griptape, understanding and implementing Rulesets, and using Agents to bring your chatbot to life. This course serves as an excellent introduction to these concepts and technologies.</p>"},{"location":"200/chatbot-rulesets/#who-is-this-course-for","title":"Who is this course for?","text":"<p>This course is aimed at beginners to intermediate level Python developers who are interested in learning more about Griptape.</p>"},{"location":"200/chatbot-rulesets/#prerequisites","title":"Prerequisites","text":"<p>Before beginning this course, you will need:</p> <ul> <li>An OpenAI API Key (available here: https://beta.openai.com/account/api-keys)</li> <li>Python3.9+ installed on your machine</li> <li>An IDE (such as Visual Studio Code or PyCharm) to write and manage your code</li> </ul> <p>If you don't have those items available, it's highly recommended you go through the Griptape Setup - Visual Studio Code course to set up your environment.</p>"},{"location":"200/chatbot-rulesets/#course-outline","title":"Course Outline","text":"<p>The course is designed to progressively build your understanding and skillset. We'll start with setting up your environment, then introduce you to the basics of Agents and Rulesets. We'll add more advanced features as the course progresses, including:</p> <ul> <li>Making your chatbot interactive</li> <li>Giving your chatbot a personality</li> <li>Enhancing chat aesthetics</li> <li>Enabling your chatbot to switch between multiple personas</li> <li>And more!</li> </ul> <p>By the end of this course, you'll have a versatile chatbot that can carry on engaging conversations with varying personas, right from your command line.</p>"},{"location":"200/chatbot-rulesets/#useful-resources","title":"Useful Resources","text":"<p>These resources will provide additional information and context throughout the course:</p> <ul> <li>Griptape Documentation</li> <li>Python-dotenv Package</li> <li>Rich Library</li> <li>Visual Studio Code</li> <li>Python Environment Manager</li> </ul>"},{"location":"200/chatbot-rulesets/#next-steps","title":"Next Steps","text":"<p>Head on to the first stage 01 - Setting Up Your Environment to get started!</p>"},{"location":"200/chatbot-rulesets/01_setting_up_environment/","title":"Setup","text":"<p>Welcome to the first step of our journey into creating a conversational chatbot! In this section, we will be focusing on setting up our work environment, which is the first step to any coding project. </p>"},{"location":"200/chatbot-rulesets/01_setting_up_environment/#prerequisites","title":"Prerequisites","text":"<p>Important</p> <p>Since this is an intermediate level course, please ensure you've gone through the Griptape Setup - Visual Studio Code course to set up your environment. We will be starting from the code at that point.</p> <ol> <li> <p>Code Editor: We recommend using Visual Studio Code for this course, due to its handy features and Python support. However, if you have another favorite IDE or text editor, feel free to use that! </p> </li> <li> <p>Python3.9+: Griptape requires Python 3.9 and above.</p> </li> <li> <p>Python Environment Manager (for VS Code users): This extension is not a hard requirement, but it does make managing your Python environments a lot easier. </p> </li> <li> <p>OpenAI API Key: Our chatbot will be powered by gpt-4, which requires an API key from OpenAI. You can get your key from OpenAI's website.</p> </li> </ol> <p>Got everything installed? Awesome! Now, let's get started setting up our project.</p>"},{"location":"200/chatbot-rulesets/01_setting_up_environment/#create-a-project","title":"Create a Project","text":"<p>Following the instructions in Griptape Setup - Visual Studio Code  please:</p> <ol> <li>Create your project folder. Example: <code>griptape-chatbot-with-rulesets-cli</code></li> <li>Set up your virtual environment</li> <li>Ensure you <code>pip install griptape griptape-tools python-dotenv</code></li> <li>Create a <code>.env</code> file with your <code>OPENAI_API_KEY</code></li> <li>Create your <code>app.py</code> file with the following code:</li> </ol> <pre><code>from dotenv import load_dotenv\nfrom griptape.structures import Agent\nload_dotenv() # Load your environment\n# Create an agent\nagent = Agent()\n# Run the agent\nagent.run(\"I'm ready to chat.\")\n</code></pre> <p>And there we have it, our coding environment is all set up! In the next section The Chat Utility, we'll look at one of the quickest ways of creating a Chatbot with Griptape.</p>"},{"location":"200/chatbot-rulesets/03_the_chat_utility/","title":"The Chat Utility","text":""},{"location":"200/chatbot-rulesets/03_the_chat_utility/#make-agent-interactive-using-chat-utility","title":"Make Agent Interactive Using Chat Utility","text":"<p>Now that we have our agent up and running, it's time to make it truly interactive and engaging. We'll introduce the Chat utility from Griptape, which is a quick way to have dynamic conversations with our chatbot. Get ready to dive into the world of witty banter and Python-powered humor!</p>"},{"location":"200/chatbot-rulesets/03_the_chat_utility/#goal","title":"Goal","text":"<p>After completing this section, you'll be able to have lively and interactive conversations with your chatbot using the Chat utility.</p>"},{"location":"200/chatbot-rulesets/03_the_chat_utility/#chat-utility","title":"Chat Utility","text":""},{"location":"200/chatbot-rulesets/03_the_chat_utility/#import","title":"Import","text":"<p>To get started, we need to import the magical <code>Chat</code> utility from Griptape. This utility will be our ticket to engaging conversations with our chatbot. In your code, add the following import statement:</p> app.py<pre><code># ... previous code\nfrom griptape.structures import Agent\nfrom griptape.utils import Chat\n# ...\n</code></pre> <p>With the Chat utility at our disposal, we're armed with the power to unleash our chatbot's conversational prowess.</p>"},{"location":"200/chatbot-rulesets/03_the_chat_utility/#call-it","title":"Call It","text":"<p>It's time to unleash our chatbot's conversational skills and start the interactive chat session. Replace the previous <code>agent.run()</code> line with the following code:</p> <pre><code># ...\n# Begin Chatting\nChat(agent).start()\n</code></pre> <p>This simple line of code will open up a world of possibilities, allowing you to converse with your chatbot as if it were your witty Python companion.</p>"},{"location":"200/chatbot-rulesets/03_the_chat_utility/#current-code","title":"Current Code","text":"<p>Here is the full code: </p> app.py<pre><code>from dotenv import load_dotenv\n# Griptape Items\nfrom griptape.structures import Agent\nfrom griptape.utils import Chat #   &lt;-- Added Chat\n# Load environment variables\nload_dotenv()\n# Create the agent\nagent = Agent()\n# Begin Chatting\nChat(agent).start()\n</code></pre>"},{"location":"200/chatbot-rulesets/03_the_chat_utility/#try-it","title":"Try it","text":"<p>It's time to play around with your chatbot. Ask it some questions, have a laugh, etc. Here's a quick example of a not-very-funny joke with the chatbot:</p> <pre><code>Q: Hello!\nprocessing...\n[07/20/23 06:37:45] INFO     Task 167f55dda2be46a7bc9002a48214dbf4                                                                                                                   \n                             Input: Hello!                                                                                                                                           \n[07/20/23 06:37:46] INFO     Task 167f55dda2be46a7bc9002a48214dbf4                                                                                                                   \n                             Output: Hello! How can I assist you today?                                                                                                              \nA: Hello! How can I assist you today?\nQ: Tell me a joke about python\nprocessing...\n[07/20/23 06:37:58] INFO     Task 167f55dda2be46a7bc9002a48214dbf4                                                                                                                   \n                             Input: Tell me a joke about python                                                                                                                      \n[07/20/23 06:38:00] INFO     Task 167f55dda2be46a7bc9002a48214dbf4                                                                                                                   \n                             Output: Why did the python programmer get bitten by a snake? Because they forgot to use a python exception handler!                                     \nA: Why did the python programmer get bitten by a snake? Because they forgot to use a python exception handler!\n</code></pre>"},{"location":"200/chatbot-rulesets/03_the_chat_utility/#exiting","title":"Exiting","text":"<p>Conversations must come to an end, even with the most entertaining chatbot. We want to gracefully exit the chat session when we're ready to bid our virtual friend farewell. To exit the chat, simply type <code>exit</code> as your input. The Chat utility will catch this magic word and gracefully end the conversation.</p> <p>So go ahead, chat away, exchange jokes, discuss Python's quirks, and when it's time to say goodbye, just type <code>exit</code> and gracefully conclude your interaction.</p> <pre><code>Q: exit\nexiting...\n</code></pre>"},{"location":"200/chatbot-rulesets/03_the_chat_utility/#code-review","title":"Code Review","text":"<p>Take a minute to check your code against the current version.</p> app.py<pre><code>from dotenv import load_dotenv\n# Griptape Items\nfrom griptape.structures import Agent\nfrom griptape.utils import Chat #   &lt;-- Added Chat\n# Load environment variables\nload_dotenv()\n# Create the agent\nagent = Agent()\n# Begin Chatting\nChat(agent).start()\n</code></pre>"},{"location":"200/chatbot-rulesets/03_the_chat_utility/#next-steps","title":"Next Steps","text":"<p>In the next section: Hide The Logs, we'll hide those pesky but oh-so-helpful logs by using the <code>logging</code> library. This will make our chatbot much easier to understand and work with.</p>"},{"location":"200/chatbot-rulesets/04_hide_the_logs/","title":"Hiding the Logs","text":"<p>In the previous section, we had a blast engaging with our chatbot, but there was one tiny detail that interrupted the flow of our conversations - those verbose logs cluttering our output. Fear not!  In this section, we'll show you how to turn off the logs and let your chatbot's brilliance shine without unnecessary distractions.</p>"},{"location":"200/chatbot-rulesets/04_hide_the_logs/#goal","title":"Goal","text":"<p>After completing this section, you'll be able to enjoy clean and clutter-free conversations with your chatbot by disabling the logs.</p>"},{"location":"200/chatbot-rulesets/04_hide_the_logs/#logging-utility","title":"Logging Utility","text":""},{"location":"200/chatbot-rulesets/04_hide_the_logs/#import","title":"Import","text":"<p>We'll begin by importing the logging library, which will give us the power to control the verbosity of our chatbot's output. Add the following import statement to your code:</p> <pre><code>import logging\n</code></pre> <p>Now we're ready to silence those logs and enjoy the tranquility of clean output.</p>"},{"location":"200/chatbot-rulesets/04_hide_the_logs/#add-to-agent","title":"Add to Agent","text":"<p>It's time to modify our agent to quiet those logs and allow our chatbot's brilliance to shine through. Adjust the code where the agent is created, like so:</p> <pre><code># Create the agent\nagent = Agent(\nlogger_level=logging.ERROR\n)\n</code></pre> <p>By specifying <code>logger_level=logging.ERROR</code>, we indicate that we only want to receive logs of the highest priority, suppressing the informational logs and leaving us with a cleaner output.</p> <p>Here is the code with the new lines highlighted:</p> <pre><code>from dotenv import load_dotenv\nimport logging                     \n# Griptape Items\nfrom griptape.structures import Agent\nfrom griptape.utils import Chat\n# Load environment variables\nload_dotenv()\n# Create the agent\nagent = Agent(\nlogger_level=logging.ERROR      \n)\n# Run the agent\nChat(agent).start()\n</code></pre>"},{"location":"200/chatbot-rulesets/04_hide_the_logs/#give-it-a-try","title":"Give it a try","text":"<p>Go ahead and execute the script and have a chat.</p> <pre><code>Q: Give me a haiku about python skateboarders\nprocessing...\nA: Python skateboarders\nGlide on wheels, swift and free\nThrilling tricks they show\nQ: \n</code></pre> <p>Success</p> <p>Ahh, isn't it refreshing? Now our conversations will flow seamlessly, without any distracting logs cluttering our chatbot's responses.</p>"},{"location":"200/chatbot-rulesets/04_hide_the_logs/#code-review","title":"Code Review","text":"<p>We've made valuable progress in this stage. Before proceeding, let's verify your code.</p> app.py<pre><code>from dotenv import load_dotenv\nimport logging                     \n# Griptape Items\nfrom griptape.structures import Agent\nfrom griptape.utils import Chat\n# Load environment variables\nload_dotenv()\n# Create the agent\nagent = Agent(\nlogger_level=logging.ERROR      \n)\n# Run the agent\nChat(agent).start()\n</code></pre>"},{"location":"200/chatbot-rulesets/04_hide_the_logs/#next-steps","title":"Next Steps","text":"<p>In the next section: Personality With Rulesets, we'll unlock the true potential of your chatbot by giving it a vibrant personality with the help of Rulesets. Prepare to witness your chatbot's transformation as it takes on unique traits, behaviors, and even multiple personas. </p>"},{"location":"200/chatbot-rulesets/05_personality_with_rulesets/","title":"Personality","text":"<p>In our quest to create an extraordinary chatbot, we've arrived at a crucial moment: giving our agent a vibrant personality! With Griptape's Rules and Rulesets, we can define a set of rules that shape our chatbot's behavior, transforming it into a unique and charming character.</p> <p>Because I live in New Zealand, I've decided to give the chatbot a bit of a Kiwi personality - feel free to use whatever persona makes you happy.</p>"},{"location":"200/chatbot-rulesets/05_personality_with_rulesets/#goal","title":"Goal","text":"<p>After completing this section, you'll be able to infuse your chatbot with a delightful Kiwi (or other) personality using Griptape's Rules and Rulesets.</p>"},{"location":"200/chatbot-rulesets/05_personality_with_rulesets/#rules-and-rulesets","title":"Rules and Rulesets","text":""},{"location":"200/chatbot-rulesets/05_personality_with_rulesets/#importing","title":"Importing","text":"<p>To give your agent access to the <code>Rule</code> and <code>Ruleset</code> classes, we need to adjust our script to import them.</p> <p>Add the following line to the top of your script:</p> <pre><code>from griptape.rules import Rule, Ruleset\n</code></pre>"},{"location":"200/chatbot-rulesets/05_personality_with_rulesets/#rules","title":"Rules","text":"<p>Rules are the building blocks of our chatbot's personality. They allow us to define specific behaviors and traits. Each rule is typically focused on one important statement or characteristic. For example, we can create rules like:</p> <pre><code>Rule(\"You are an incredibly helpful kiwi tour guide.\")\nRule(\"You often forget where you kept your keys.\")\nRule(\"You speak in riddles, but not very clever ones.\")\n</code></pre> <p>The specific rules are really up to you, and you will most likely find yourself iterating on your rules in order to achieve the perfect output. </p>"},{"location":"200/chatbot-rulesets/05_personality_with_rulesets/#rulesets","title":"Rulesets","text":"<p>Once we have defined our rules, we can group them together into a <code>Ruleset</code>. A Ruleset allows us to combine related rules, creating a cohesive set of behaviors for our chatbot. In our case, we'll create a ruleset called \"kiwi\" for our kiwi-inspired friend.</p> <pre><code># Create a ruleset for the agent\nkiwi_ruleset = Ruleset(\nname=\"kiwi\",\nrules=[\nRule(\"You identify as a New Zealander.\"),\nRule(\"You have a strong kiwi accent.\")\n]\n)\n</code></pre> <p>Here, we use the Ruleset class from the griptape.rules module. </p> <p>This class allows us to create a ruleset by specifying a <code>name</code> for the ruleset and a list of <code>rules</code> that define the desired behavior. In our case, the ruleset is named \"kiwi\" and contains two rules: one indicating the chatbot's New Zealander identity and another highlighting its strong kiwi accent.</p>"},{"location":"200/chatbot-rulesets/05_personality_with_rulesets/#add-to-the-agent","title":"Add to the Agent","text":"<p>With our rules and ruleset in place, it's time to create our kiwi chatbot! We'll assign the kiwi ruleset to the agent and let the magic unfold.</p> <p>We will update our instantiation of the Agent class and pass the kiwi_ruleset as a parameter to the rulesets argument. This associates the kiwi ruleset with our chatbot, infusing it with the desired kiwi personality traits. </p> <p>Info</p> <p>The Agent can handle multiple rulesets, which is why it's specified as a list. </p> <p>We'll demonstrate this in a later lesson.</p> <pre><code># Create the agent\nagent = Agent(\nrulesets=[kiwi_ruleset],  \nlogger_level=logging.ERROR\n)\n</code></pre>"},{"location":"200/chatbot-rulesets/05_personality_with_rulesets/#try-it","title":"Try it","text":"<p>Let's go ahead and chat with our chatbot. <pre><code>Q: Can you give me some kiwi slang?\nprocessing...\n\nA: Sure as, mate! Here are a few kiwi slang words and phrases for ya:\n1. Chur - It means thanks or cheers.\n2. Sweet as - It means something is good or all good.\n3. Jandals - It's what we call flip-flops.\n4. Dairy - It's a convenience store or a corner shop.\n5. Bach - It's a holiday home or a beach house.\n6. Chocka - It means something is full or crowded.\n7. Tiki tour - It means taking a scenic route or a detour.\n8. She'll be right - It means everything will be okay or no worries.\nHope that helps, bro!\n\nQ: I've heard people say \"yeah, nah\" - what does that mean?\nprocessing...\nA: Yeah, nah, that's a classic kiwi phrase! It's a way of expressing hesitation or disagreement. When someone says \"yeah, nah,\" it usually means they understand what you're saying, but they don't fully agree or they're not entirely convinced. It's a bit hard to explain, but you'll catch on to it when you're in New Zealand. It's just one of those quirky kiwi expressions!\n</code></pre></p> <p>Success</p> <p>Congratulations! You now have an extremely interesting chatbot!</p>"},{"location":"200/chatbot-rulesets/05_personality_with_rulesets/#code-review","title":"Code Review","text":"<p>We've delved into a key concept in this stage, and it's time to validate your understanding. Compare your code with the latest version.</p> app.py<pre><code>from dotenv import load_dotenv\nimport logging\n# Griptape Items\nfrom griptape.structures import Agent\nfrom griptape.utils import Chat\nfrom griptape.rules import Rule, Ruleset\n# Load environment variables\nload_dotenv()\n# Create a ruleset for the agent\nkiwi_ruleset = Ruleset(\nname = \"kiwi\",\nrules = [\nRule(\"You identify as a New Zealander.\"),\nRule(\"You have a strong kiwi accent.\")\n]\n)\n# Create the agent\nagent = Agent(\nrulesets=[\nkiwi_ruleset\n],\nlogger_level=logging.ERROR\n)\n# Run the agent\nChat(agent).start()\n</code></pre>"},{"location":"200/chatbot-rulesets/05_personality_with_rulesets/#next-steps","title":"Next Steps","text":"<p>In the next section: Custom Chat, we'll explore how to take charge of the way your chatbot behaves, by creating a custom chat function. </p>"},{"location":"200/chatbot-rulesets/06_adding_manual_chat/","title":"Custom Chat","text":"<p>While the chatbot is working, it's not very user-friendly yet. The <code>Q:</code> and <code>A:</code> prompts don't make for the most engaging for a user experience.</p> <p>In this step, we'll implement a manual chat experience, giving us more control over the conversation with our chatbot. We'll remove the Chat utility and create our own custom functions to facilitate interactive and dynamic conversations.</p> <p>Let's get started!</p>"},{"location":"200/chatbot-rulesets/06_adding_manual_chat/#remove-the-chat-utility","title":"Remove the Chat Utility","text":"<p>To implement our custom manual chat functionality, we'll remove the dependency on the Chat utility provided by Griptape. We'll no longer need the line <code>from griptape.utils import Chat</code> in our code.</p> <p>Update the code by commenting out or removing the following line:</p> <pre><code># from griptape.utils import Chat\n</code></pre> <p>Don't forget to remove or comment out the line where we use the Chat utility with the agent at the bottom of the script:</p> <pre><code># Run the agent\n# Chat(agent).start()\n</code></pre> <p>With the Chat utility out of the picture, we're ready to take charge and create our own chat function.</p>"},{"location":"200/chatbot-rulesets/06_adding_manual_chat/#create-our-chat","title":"Create our Chat","text":""},{"location":"200/chatbot-rulesets/06_adding_manual_chat/#the-loop","title":"The Loop","text":"<p>Now that the old Chat function has been removed, we'll need to replace it with our own code. Let's start by with a simple loop that takes the user input until they type <code>exit</code>.</p> <pre><code># Keep track of when we're chatting\nis_chatting = True\nwhile is_chatting: # While chatting is still true\nuser_input = input(\"Chat with kiwi: \")\nif user_input == \"exit\":\nis_chatting = False\nelse:\nprint(f\"Kiwi: Hah! you said: {user_input}!\")\n</code></pre> <p>If you just run this code on it's own, you'll see that it allows the user to keep entering information over and over again until they type exit.</p> <p>It's not very amazing, and certainly doesn't interact with the agent yet, so let's modify the code to handle that.</p>"},{"location":"200/chatbot-rulesets/06_adding_manual_chat/#add-the-agent","title":"Add the Agent","text":"<p>After the <code>else:</code> statement, change the code to call <code>agent.run()</code>:</p> <pre><code>while is_chatting:\n# ... truncated for brevity ... #\nelse:\nagent_result = agent.run(user_input)\nprint (f\"Kiwi: {agent_result.output.value}\")\n</code></pre> <p>As you can see now, the agent runs, and we get the output stored in the variable agent_result. We can then print that output by using the <code>output.value</code> attribute.</p>"},{"location":"200/chatbot-rulesets/06_adding_manual_chat/#chat-function","title":"Chat Function","text":""},{"location":"200/chatbot-rulesets/06_adding_manual_chat/#create","title":"Create","text":"<p>Let's clean this up a bit and define a custom <code>chat</code> function that will hold all this code instead of placing it at the end of our script.</p> <p>Here's the code for the <code>chat</code> function and the way we can call it:</p> <pre><code># Chat function\ndef chat(agent):\nis_chatting = True\nwhile is_chatting:\nuser_result = input(\"Chat with Kiwi: \")\nif user_result == \"exit\":\nis_chatting = False\nelse:           \n# Keep on chatting\nagent_result = agent.run(user_input)\nprint (f\"Kiwi: {agent_result.output.value}\")\n</code></pre>"},{"location":"200/chatbot-rulesets/06_adding_manual_chat/#call","title":"Call","text":"<p>Once the chat function has been created, we can just call it and pass the agent. <pre><code># Run the agent\nchat(agent)\n</code></pre></p> <p>The <code>chat</code> function takes the <code>agent</code> as an argument.</p> <p>You shouldn't notice any difference to how you ran this before, it's just a bit cleaner.</p> <p>Engage in stimulating conversations, explore various topics, and enjoy the interactive experience as you communicate with your chatbot.</p>"},{"location":"200/chatbot-rulesets/06_adding_manual_chat/#code-checkpoint","title":"Code Checkpoint","text":"<p>We made a lot of important changes in this stage. Before we move forward, let's compare code. Changed lines are highlighted.</p> app.py<pre><code>from dotenv import load_dotenv\nimport logging\n# Griptape Items\nfrom griptape.structures import Agent\nfrom griptape.rules import Rule, Ruleset\n# Load environment variables\nload_dotenv()\n# Create a ruleset for the agent\nkiwi_ruleset = Ruleset(\nname = \"kiwi\",\nrules = [\nRule(\"You identify as a New Zealander.\"),\nRule(\"You have a strong kiwi accent.\")\n]\n)\n# Create the agent\nagent = Agent(\nrulesets=[\nkiwi_ruleset,\n],\nlogger_level=logging.ERROR\n)\n# Chat function\ndef chat(agent):\nis_chatting = True\nwhile is_chatting:\nuser_input = input(\"Chat with Kiwi: \")\nif user_input == \"exit\":\nis_chatting = False\nelse:\n# Keep on chatting\nagent_result = agent.run(user_input)\nprint (f\"Kiwi: {agent_result.output.value}\")\n# Run the agent\nchat(agent)\n</code></pre>"},{"location":"200/chatbot-rulesets/06_adding_manual_chat/#next-steps","title":"Next Steps","text":"<p>Congratulations on implementing manual chat functionality and taking control of the conversation! In the next section Manners Maketh the Bot, we'll give the bot some manners and create our own Agent class to make working with the agent more consistent.</p>"},{"location":"200/chatbot-rulesets/07_manners_maketh_the_bot/","title":"Manners Maketh the Bot","text":"<p>This course covers two topics:</p> <ul> <li>Adding manners</li> <li>Making agent interaction more consistent by creating a <code>respond</code> method</li> </ul> <p>We'll start with manners, as that will clearly demonstrate our need to find a way to make our interaction with our agent more consistent.</p>"},{"location":"200/chatbot-rulesets/07_manners_maketh_the_bot/#manners","title":"Manners","text":""},{"location":"200/chatbot-rulesets/07_manners_maketh_the_bot/#chatbot-can-you-hear-me","title":"Chatbot can you hear me?","text":"<p>It's always awkward to walk into the middle of a conversation and not have someone acknowledge your presence. Let's modify the code to have the chatbot introduce itself before you begin talking.</p> <p>Add a call to the agent to introduce itself before the <code># Run the agent</code> line:</p> <pre><code># Introduce the agent\nagent_response = agent.run(\"Introduce yourself to the user.\")\nprint(f\"Kiwi: {agent_response.value.output}\")\n# Run the agent\nchat(agent)\n</code></pre> <p>Now feel free to run the chat a few times. </p> <pre><code>Kiwi: Kia ora! G'day mate! I'm a conversational bot from Aotearoa, also known as New Zealand. How can I help you today?\n\nChat with the kiwi: Can I have a funny haiku about gumboots?\n\nKiwi:  Sure as, bro! Here's a funny haiku about gumboots:\nGumboots on my feet,\nSquishy mud, they can't be beat,\nKiwi fashion feat!\n</code></pre>"},{"location":"200/chatbot-rulesets/07_manners_maketh_the_bot/#repeating-ourselves","title":"Repeating ourselves","text":"<p>Just like it's not polite to ignore someone when they walk into a conversation, it's not great to repeat yourself over and over.</p> <p>Notice we're doing exactly that at the moment. </p> <pre><code># ...\n# Chat function\ndef chat(agent):\nis_chatting = True\nwhile is_chatting:\nuser_input = input(\"Chat with Kiwi: \")\nif user_input == \"exit\":\nis_chatting = False\nelse:\n# Keep on chatting\nagent_result = agent.run(user_input)\nprint (f\"Kiwi: {agent_result.output.value}\")\n# Introduce the agent\nagent_response = agent.run(\"Introduce yourself to the user.\")\nprint(f\"Kiwi: {agent_response.value.output}\")\n# Run the agent\nchat(agent)\n</code></pre> <p>This is not a great programming practice because it means any changes we want to make to the output of our chat will have to be done in multiple places. It make maintaining the code way more difficult, and it doens't adhere to the DRY principle (Don't Repeat Yourself).</p> <p>There are a numbmer of ways we could approach this, including:</p> <ul> <li>Create a <code>respond</code> function</li> <li>Subclass the Agent and create a <code>respond</code> method.</li> </ul> <p>Both are valid solutions and it's worth looking at what it would feel like to work with each of them to see what feels best.</p> FunctionMethod <pre><code># Send a command to the agent\nagent.run(\"Can I have a haiku?\")\n# Run a command and print the result to the user\nrespond(agent, \"Can I have a haiku?\")\n</code></pre> <pre><code># Send a command to the agent\nagent.run(\"Can I have a haiku?\")\n# Run a command and print the result to the user\nagent.respond(\"Can I have a haiku?\")\n</code></pre> <p>Taking a look at both options, I think in the end it feels more consistent to use a method instead of a function due to the consistent feel of working with the agent: <code>agent.run()</code> and <code>agent.respond()</code>.</p>"},{"location":"200/chatbot-rulesets/07_manners_maketh_the_bot/#adding-the-method","title":"Adding the Method","text":""},{"location":"200/chatbot-rulesets/07_manners_maketh_the_bot/#subclass-the-agent","title":"Subclass the Agent","text":"<p>First we'll need to create a subclass for the Agent. This will allow us to create additional methods for the agent, and still inherit all the wonderful things Agent gives us.</p> <p>Add the following lines before <code>agent = Agent()</code> in your code:</p> <pre><code># Create a subclass for the Agent\nclass MyAgent(Agent):\n# Create the agent\n</code></pre>"},{"location":"200/chatbot-rulesets/07_manners_maketh_the_bot/#the-respond-method","title":"The <code>Respond</code> Method","text":"<p>Now, add the respond method to the MyAgent class and use the same agent_response = agent.run and print commands you used earlier. </p> <pre><code># Create a subclass for the Agent\nclass MyAgent(Agent):\ndef respond (self, user_input):\nagent_response = agent.run(user_input)\nprint(f\"Kiwi: {agent_response.output.value}\") \n</code></pre>"},{"location":"200/chatbot-rulesets/07_manners_maketh_the_bot/#update-agent","title":"Update Agent","text":"<p>Next, replace the line where you create the agent:</p> <pre><code>agent = Agent()\n</code></pre> <p>with</p> <pre><code>agent = MyAgent()\n</code></pre> <p>to make sure we're now calling the new agent.</p>"},{"location":"200/chatbot-rulesets/07_manners_maketh_the_bot/#update-calls-to-agent-response","title":"Update calls to agent response","text":"<p>Finally, replace the lines where we were previously getting the result of the <code>agent.run()</code> function with <code>agent.respond()</code>. At the moment this will be in two locations:</p> <ul> <li>Inside the <code>chat</code> function</li> <li>When the agent introduces itself</li> </ul> <p>Replace: <pre><code>agent_result = agent.run(user_input)\nprint(f\"Kiwi: {agent_result.output.value}\")\n</code></pre></p> <p>with:</p> <pre><code>agent.respond(user_input)\n</code></pre> <p>Warning</p> <p>Don't replace those lines inside the <code>respond</code> method. Only replace them outside the method.</p>"},{"location":"200/chatbot-rulesets/07_manners_maketh_the_bot/#review","title":"Review","text":"<p>Since we just made some big changes, here are those alterations brought together, with new lines highlighted.</p> <pre><code># ...\n# Create a subclass for the Agent\nclass MyAgent(Agent):\ndef respond (self, user_input):\nagent_response = agent.run(user_input)\nprint(f\"Kiwi: {agent_response.output.value}\")\n# ... truncated for brevity\n# Chat function\ndef chat(agent):\nis_chatting = True\nwhile is_chatting:\nuser_input = input(\"Chat with Kiwi: \")\nif user_input == \"exit\":\nis_chatting = False\nelse:\nagent.respond(user_input)\n# Introduce the agent\nagent.respond(\"Introduce yourself to the user.\")\n# ...\n</code></pre>"},{"location":"200/chatbot-rulesets/07_manners_maketh_the_bot/#more-manners","title":"More Manners","text":""},{"location":"200/chatbot-rulesets/07_manners_maketh_the_bot/#dont-leave-without-saying-goodbye","title":"Don't leave without saying Goodbye","text":"<p>Let's give the chatbot a bit more social grace and have it say goodbye when the person stops the chat. Before setting <code>is_chatting = False</code>, add the following line:</p> <p><pre><code>agent.respond(\"The user is finished chatting. Say goodbye.\")\n</code></pre> This will tell the agent that the user is leaving the chat, and then print the output to the screen. Here's that section of the code in context:</p> <p>Here's an example of how that would play out: <pre><code>Chat with kiwi: exit\nKiwi: Good on ya, mate! Take care and have a ripper day!\n</code></pre></p>"},{"location":"200/chatbot-rulesets/07_manners_maketh_the_bot/#clean-up-the-output","title":"Clean up the output","text":"<p>Finally, let's enhance the readability of the chat by adding a bit more space around the output of the chat.</p> <p>This can be done by modifying the <code>resopnd</code> method to add two print statements.</p> <pre><code>class MyAgent(Agent):\ndef respond (self, user_input):\nagent_response = agent.run(user_input)\nprint(\"\")\nprint(f\"Kiwi: {agent_response.output.value}\")\nprint(\"\")\n</code></pre>"},{"location":"200/chatbot-rulesets/07_manners_maketh_the_bot/#code-checkpoint","title":"Code Checkpoint","text":"<p>We made some major updates to the code in this section. Take a look:</p> app.py<pre><code>from dotenv import load_dotenv\nimport logging\n# Griptape Items\nfrom griptape.structures import Agent\nfrom griptape.rules import Rule, Ruleset\n# Load environment variables\nload_dotenv()\n# Create a ruleset for the agent\nkiwi_ruleset = Ruleset(\nname = \"kiwi\",\nrules = [\nRule(\"You identify as a New Zealander.\"),\nRule(\"You have a strong kiwi accent.\")\n]\n)\n# Create a subclass for the Agent\nclass MyAgent(Agent):\ndef respond (self, user_input):\nagent_response = agent.run(user_input)\nprint(\"\")\nprint(f\"Kiwi: {agent_response.output.value}\")\nprint(\"\")\n# Create the agent\nagent = MyAgent(\nrulesets=[\nkiwi_ruleset,\n],\nlogger_level=logging.ERROR\n)\n# Chat function\ndef chat(agent):\nis_chatting = True\nwhile is_chatting:\nuser_input = input(\"Chat with Kiwi: \")\nif user_input == \"exit\":\nagent.respond(\"The user is finished chatting. Say goodbye.\")\nis_chatting = False\nelse:\nagent.respond(user_input)\n# Introduce the agent\nagent.respond(\"Introduce yourself to the user.\")\n# Run the agent\nchat(agent)\n</code></pre>"},{"location":"200/chatbot-rulesets/07_manners_maketh_the_bot/#next-steps","title":"Next Steps","text":"<p>Congratulations on implementing manual chat functionality and taking control of the conversation! In the next section Adding Another Ruleset, we'll explore the world of output rulesets, unlocking the ability to control the chatbot's responses in different formats such as JSON, YAML, or even haiku.</p>"},{"location":"200/chatbot-rulesets/08_adding_another_ruleset_for_output/","title":"Rulesets for Output","text":"<p>Consider a situation where we have integrated the LLM (Language Learning Module) into our code. It becomes crucial for us to receive the output in a specific format that aligns with our requirements, like JSON. By employing an output ruleset, we can precisely control the structure and format of the chatbot's responses.</p>"},{"location":"200/chatbot-rulesets/08_adding_another_ruleset_for_output/#goal","title":"Goal","text":"<p>After completing this section, you'll be able use output rulesets to get responses from the LLM in the way most useful for your application.</p>"},{"location":"200/chatbot-rulesets/08_adding_another_ruleset_for_output/#new-ruleset","title":"New Ruleset","text":""},{"location":"200/chatbot-rulesets/08_adding_another_ruleset_for_output/#json-ruleset","title":"JSON Ruleset","text":"<p>To achieve our goal of formatting the response as JSON, we'll create a ruleset called \"json_ruleset.\" This ruleset will contain a single rule that tells the chatbot to use JSON when formulating it's response. Place it after the kiwi_rulesest:</p> <pre><code>json_ruleset = Ruleset(\nname=\"json_ruleset\",\nrules=[\nRule(\"Use JSON when formulating your response.\")\n]\n)\n</code></pre>"},{"location":"200/chatbot-rulesets/08_adding_another_ruleset_for_output/#integration","title":"Integration","text":"<p>With the json_ruleset in hand, it's time to integrate it into our Agent. By including it in the list of rulesets available to the Agent, we can harness its power to control the response format.</p> <pre><code># Create the agent\nagent = MyAgent(\nrulesets=[kiwi_ruleset, json_ruleset],\nlogger_level=logging.ERROR\n)\n</code></pre> <p>Here, we modify the <code>MyAgent</code> instantiation to include both the <code>kiwi_ruleset</code> and <code>json_ruleset</code> in the <code>rulesets=[]</code> argument. This ensures that our chatbot possesses the kiwi personality traits while also adhering to the desired response format specified by the json_ruleset.</p>"},{"location":"200/chatbot-rulesets/08_adding_another_ruleset_for_output/#test","title":"Test","text":"<p>Prepare for an exciting conversation as we engage our chatbot in a quest for knowledge about Wellington's top tourist destinations. Let's dive in:</p> <pre><code>Q: \"Hey chatbot, what are the top three tourist destinations in Wellington? Can you give me a name and a description?\"\nKiwi: {\n\"message\": \"Absolutely, mate! Here are the top three tourist destinations in Wellington with a brief description:\",\n\"destinations\": [\n{\n\"name\": \"Te Papa Museum\",\n\"description\": \"New Zealand's national museum, known for its interactive and innovative exhibits.\"\n},\n{\n\"name\": \"Wellington Cable Car\",\n\"description\": \"An iconic Wellington attraction, offering stunning views of the city and harbour.\"\n},\n{\n\"name\": \"Zealandia Ecosanctuary\",\n\"description\": \"A unique protected natural area where you can see New Zealand's wildlife up close.\"\n}\n]\n}\n</code></pre> <p>Enjoy the beauty of Wellington's top tourist destinations, neatly presented in a JSON format, as our chatbot provides you with insightful reasons to visit each destination.</p>"},{"location":"200/chatbot-rulesets/08_adding_another_ruleset_for_output/#using-it","title":"Using it","text":""},{"location":"200/chatbot-rulesets/08_adding_another_ruleset_for_output/#adding-keys","title":"Adding Keys","text":"<p>While this is an interesting example, let's use the ruleset in a way that helps control the way our application works.</p> <p>Currently, the user has to know to type \"exit\" to leave the chat. This is not a great user experience, as it's a hidden command. We are using a chat-interface... wouldn't it be great if we could simply tell the chatbot when we were done chatting and it would quit on it's own?</p> <p>Turns out, we can do just that - by using the <code>json_ruleset</code>.</p> <p>Modify the json ruleset to look like the following:</p> <pre><code>json_ruleset = Ruleset(\nname='json_ruleset',\nrules = [\nRule(\"Respond in plain text only with JSON objects that have the following keys: response, continue_chatting.\"),\nRule(\"The 'response' value should be a string that is your response to the user.\"),\nRule(\"If it sounds like the person is done chatting, set 'continue_chatting' to False, otherwise it is True\"),\n]\n)\n</code></pre> <p>The first rule tells the chatbot to respond in json, and specifies the keys. </p> <p>The second and third rules explain what the values for those keys should be. Notice the third one specifically says that if it sounds like the person is done chatting, set <code>continue_chatting</code> to <code>False</code>.</p> <p>Go ahead and run the example and notice the response.</p> <pre><code>Kiwi: {\n\"response\": \"G'day mate! I'm a bot from New Zealand, speaking with a strong kiwi accent. How can I assist you today?\",\n\"continue_chatting\": true\n}\nChat with Kiwi: see ya later\nKiwi: {\n\"response\": \"No worries, mate! Catch ya later!\",\n\"continue_chatting\": false\n}\n</code></pre> <p>See how <code>continue_chatting</code> returns false when it sounds like we're done talking?</p> <p>Let's now use this json output!</p>"},{"location":"200/chatbot-rulesets/08_adding_another_ruleset_for_output/#import-json","title":"Import JSON","text":"<p>First, we'll have to import the json library. To do that, add the following at the beginning of your script:</p> <pre><code>import json\n</code></pre>"},{"location":"200/chatbot-rulesets/08_adding_another_ruleset_for_output/#load-json","title":"Load JSON","text":"<p>Next, we'll use the <code>json.loads()</code> function to take the output from the agent's response and convert it into json data.</p> <p>Modify the start of the <code>respond</code> method of the <code>MyAgent</code> class, to look like:</p> <p><pre><code>    # ... truncated for brevity\ndef respond (self, user_input):\nagent_response = agent.run(user_input)\ndata = json.loads(agent_response.output.value)\nresponse = data[\"response\"]\ncontinue_chatting = data[\"continue_chatting\"]\n#...\n</code></pre> This creates two variables - <code>response</code> which will be the normal response from the chatobt, and <code>continue_chatting</code> which should be <code>True</code> or <code>False</code>.</p>"},{"location":"200/chatbot-rulesets/08_adding_another_ruleset_for_output/#update-print","title":"Update Print","text":"<p>Modify the print statement where we get the response from the chatbot to look like:</p> <pre><code>        print(f\"Kiwi: {response}\")\n</code></pre>"},{"location":"200/chatbot-rulesets/08_adding_another_ruleset_for_output/#return-state","title":"Return State","text":"<p>And then return the <code>continue_chatting</code> at the end of the method. <pre><code>    # ...\ndef respond (self, user_input):\n# ...\nreturn continue_chatting\n#...\n</code></pre></p> <p>The whole class should look like:</p> <pre><code># Create a subclass for the Agent\nclass MyAgent(Agent):\ndef respond (self, user_input):\nagent_response = agent.run(user_input)\ndata = json.loads(agent_response.output.value)\nresponse = data[\"response\"]\ncontinue_chatting = data[\"continue_chatting\"]\nprint(\"\")\nprint(f\"Kiwi: {response}\")\nprint(\"\")\nreturn continue_chatting\n</code></pre>"},{"location":"200/chatbot-rulesets/08_adding_another_ruleset_for_output/#simplify-chat","title":"Simplify Chat","text":"<p>Since we're returning <code>True</code> or <code>False</code> from the <code>agent.respond()</code> method, the entire <code>chat</code> function can now be simplified as: <pre><code># Chat function\ndef chat(agent):\nis_chatting = True\nwhile is_chatting:\nuser_input = input(\"Chat with Kiwi: \")\nis_chatting = agent.respond(user_input)\n</code></pre></p> <p>Give it a try and see how you can quit the chat simply by holding the conversation:</p> <pre><code>Kiwi: G'day mate! I'm a bot from New Zealand, speaking with a strong kiwi accent. How can I assist you today?\n\nChat with Kiwi: I'm good, how are you?\n\nKiwi: I'm doing great, thanks for asking! Anything else you'd like to chat about, mate?\n\nChat with Kiwi: Nah, I'm done for today.\n\nKiwi: No worries, mate! Have a good one. Don't hesitate to reach out if you need anything else.\n</code></pre>"},{"location":"200/chatbot-rulesets/08_adding_another_ruleset_for_output/#code-review","title":"Code Review","text":"<p>By leveraging the power of output rulesets, we've demonstrated how you can guide your chatbot to deliver responses in any desired format. Take a moment to check your code.</p> app.py<pre><code>from dotenv import load_dotenv\nimport logging\nimport json\n# Griptape Items\nfrom griptape.structures import Agent\nfrom griptape.rules import Rule, Ruleset\n# Load environment variables\nload_dotenv()\n# Create a ruleset for the agent\nkiwi_ruleset = Ruleset(\nname = \"kiwi\",\nrules = [\nRule(\"You identify as a New Zealander.\"),\nRule(\"You have a strong kiwi accent.\")\n]\n)\njson_ruleset = Ruleset(\nname=\"json_ruleset\",\nrules=[\nRule(\"Respond in plain text only with JSON objects that have the following keys: response, continue_chatting.\"),\nRule(\"The 'response' value should be a string that is your response to the user.\"),\nRule(\"If it sounds like the person is done chatting, set 'continue_chatting' to False, otherwise it is True\"),\n]\n)\n# Create a subclass for the Agent\nclass MyAgent(Agent):\ndef respond (self, user_input):\nagent_response = agent.run(user_input)\ndata = json.loads(agent_response.output.value)\nresponse = data[\"response\"]\ncontinue_chatting = data[\"continue_chatting\"]\nprint(\"\")\nprint(f\"Kiwi: {response}\")\nprint(\"\")\nreturn continue_chatting\n# Create the agent\nagent = MyAgent(\nrulesets=[kiwi_ruleset, json_ruleset],\nlogger_level=logging.ERROR\n)\n# Chat function\ndef chat(agent):\nis_chatting = True\nwhile is_chatting:\nuser_input = input(\"Chat with Kiwi: \")\nis_chatting = agent.respond(user_input)\n# Introduce the agent\nagent.respond(\"Introduce yourself to the user.\")\n# Run the agent\nchat(agent)\n</code></pre>"},{"location":"200/chatbot-rulesets/08_adding_another_ruleset_for_output/#next-steps","title":"Next Steps","text":"<p>In the next stage, Formatting Chat Output,   we'll make the chat interface more visually appealing and chat-like using the rich library. Get ready to add some style and flair to your conversations!</p>"},{"location":"200/chatbot-rulesets/09_formatting_chat_output/","title":"Formatting Output","text":""},{"location":"200/chatbot-rulesets/09_formatting_chat_output/#rich-library","title":"Rich Library","text":"<p>To make the chatbot output look more chat-like, we'll use the <code>rich</code> library. This library provides advanced formatting and styling options for the console output. We'll modify the chatbot function to apply formatting to the agent's responses. </p>"},{"location":"200/chatbot-rulesets/09_formatting_chat_output/#import","title":"Import","text":"<p>First, let's update the code to import the <code>rich</code> library. Include the following import statements in the import section of <code>app.py</code>.</p> <pre><code>from rich import print as rprint\nfrom rich.panel import Panel\n</code></pre> <p>The first line imports the <code>print</code> library from <code>rich</code> and assigns an alias: <code>rprint</code>. By using <code>rprint</code> as an alias, we can replace regular <code>print</code> statements in our code with <code>rprint</code> to utilize the enhanced capabilities of 'rich' for displaying formatted text.</p> <p>For example, instead of using <code>print(\"Hello, World!\")</code>, we can now use <code>rprint(\"Hello, World!\")</code> to leverage the formatting capabilities provided by 'rich' when displaying the output.</p> <p>Tip</p> <p>Sometimes people will simply recommend overiding the standard print functionality by doing <code>from rich import print</code>, but that would actually replace other uses of <code>print</code> in your code. For this reason, I recommend importing it as <code>rprint</code> in order to ensure behavior we expect. But in reality, it's totally up to you. Read the documentation for more information.</p> <p>The second line imports the Panel class from the <code>rich.panel</code> module. The Panel class represents a styled container that can be used to encapsulate and visually enhance content within a console output. It allows us to create panels with various styles, colors, and borders.</p>"},{"location":"200/chatbot-rulesets/09_formatting_chat_output/#panel","title":"Panel","text":"<p>Next, we'll update our <code>respond</code> method to use the new <code>rprint</code> alias and the <code>Panel</code> class. This is a pretty simple change to start with, but you'll very quickly see how much nicer things look.</p> <p>Inside the <code>respond</code> method, replace the line that looks like:</p> <p><pre><code>print(f\"Kiwi: {response}\")\n</code></pre> with</p> <pre><code>rprint(Panel(f\"Kiwi: {response}\"))\n</code></pre> <p>As you can see, we've simply replaced <code>print</code> with <code>rprint</code>, and wrapped the string that was being submitted with <code>Panel()</code>.</p> <p>If you run this code you'll see a quick improvement. <pre><code>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Kiwi: Kia Ora! What can I do for you today?                                     \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\nChat with Kiwi: \n</code></pre></p> <p>Much better, right? We're not done yet..</p>"},{"location":"200/chatbot-rulesets/09_formatting_chat_output/#fitting-it-in","title":"Fitting it in","text":"<p>One of the nice things about <code>rich</code> is that it can control the width of the Panel automatically by using a <code>fit</code> function to fit the content.</p> <p>Modify the <code>Panel</code> line to include <code>.fit</code> <pre><code>rprint(Panel.fit(f\"Kiwi: {response}\"))\n</code></pre></p> <p>Try it out to see how it feels.</p> <pre><code>Chat with Kiwi: Say hello in 2 words as a kiwi\n\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Kiwi: Kia ora, mate! \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"200/chatbot-rulesets/09_formatting_chat_output/#propper-width","title":"Propper width","text":"<p>Sometimes the response can be quite long and fill the terminal. In these cases, it's nice to also be able to give a maximum width to your reponse. You can do this by giving the <code>width</code> attribute. Used in combination with <code>fit</code>, the panel will be either the width of your content, or the width you specify with the attribute - whatever is smaller.</p> <p>Modify the prompt:</p> <pre><code>rprint(Panel.fit(f\"Kiwi: {response}\", width=80))\n</code></pre> <p>Now the panel will be at most 80 characters wide.</p> <pre><code>Chat with Kiwi: What's the best thing about the Wairarapa?\n\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Kiwi: Oh, the Wairarapa, mate! It's a stunner. The best thing about it has   \u2502\n\u2502 to be the beautiful landscapes, from the rugged coastlines to the lush       \u2502\n\u2502 vineyards. It's a real treat for the eyes, I tell ya!                        \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"200/chatbot-rulesets/09_formatting_chat_output/#code-review","title":"Code Review","text":"<p>As you can see, this has already helped our readability a ton. Compare your code.</p> app.py<pre><code>from dotenv import load_dotenv\nimport logging\nimport json\n# Rich\nfrom rich import print as rprint\nfrom rich.panel import Panel\n# Griptape \nfrom griptape.structures import Agent\nfrom griptape.rules import Rule, Ruleset\n# Load environment variables\nload_dotenv()\n# Create a ruleset for the agent\nkiwi_ruleset = Ruleset(\nname = \"kiwi\",\nrules = [\nRule(\"You identify as a New Zealander.\"),\nRule(\"You have a strong kiwi accent.\")\n]\n)\njson_ruleset = Ruleset(\nname=\"json_ruleset\",\nrules=[\nRule(\"Respond in plain text only with JSON objects that have the following keys: response, continue_chatting.\"),\nRule(\"The 'response' value should be a string that is your response to the user.\"),\nRule(\"If it sounds like the person is done chatting, set 'continue_chatting' to False, otherwise it is True\"),\n]\n)\n# Create a subclass for the Agent\nclass MyAgent(Agent):\ndef respond (self, user_input):\nagent_response = agent.run(user_input)\ndata = json.loads(agent_response.output.value)\nresponse = data[\"response\"]\ncontinue_chatting = data[\"continue_chatting\"]\nprint(\"\")\nrprint(Panel.fit(f\"Kiwi: {response}\", width=80))\nprint(\"\")\nreturn continue_chatting\n# Create the agent\nagent = MyAgent(\nrulesets=[kiwi_ruleset, json_ruleset],\nlogger_level=logging.ERROR\n)\n# Chat function\ndef chat(agent):\nis_chatting = True\nwhile is_chatting:\nuser_input = input(\"Chat with Kiwi: \")\nis_chatting = agent.respond(user_input)\n# Introduce the agent\nagent.respond(\"Introduce yourself to the user.\")\n# Run the agent\nchat(agent)\n</code></pre>"},{"location":"200/chatbot-rulesets/09_formatting_chat_output/#next-steps","title":"Next Steps","text":"<p>As a developer, you may be intersted in having your chatbot write code for you, or create some tables. In the next section: Markdown Madness, we'll take a look at the <code>Markdown</code> class in <code>rich</code>, and use it to ensure output looks as we expect.</p>"},{"location":"200/chatbot-rulesets/10_markdown_madness/","title":"Markdown Madness","text":"<p>In this stage, we'll enhance our chatbot's code display by harnessing the power of Markdown. With Markdown, we can beautifully format and highlight code snippets to make them more readable and visually appealing. </p>"},{"location":"200/chatbot-rulesets/10_markdown_madness/#review","title":"Review","text":"<p>First let's see why our current output doesn't work. Ask the chatbot to do something useful - like create a bash script that will create an alias to launch VS Code.</p> <pre><code>Chat with Kiwi: Can you create a bash script that will create an \nalias for me to launch visual studio code?\n\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 Kiwi: Kia ora! G'day mate! I can definitely help you with that. Here's a     \u2502\n\u2502 bash script that will create an alias for you to launch Visual Studio Code:  \u2502\n\u2502                                                                              \u2502\n\u2502 ```bash                                                                      \u2502\n\u2502 #!/bin/bash                                                                  \u2502\n\u2502                                                                              \u2502\n\u2502 echo \"alias code='open -a Visual\\ Studio\\ Code'\" &gt;&gt; ~/.bash_profile          \u2502\n\u2502 source ~/.bash_profile                                                       \u2502\n\u2502                                                                              \u2502\n\u2502 echo \"Alias created! You can now launch Visual Studio Code by typing 'code'  \u2502\n\u2502 in your terminal. Let me know if you need any further assistance!\"           \u2502\n\u2502 ```                                                                          \u2502\n\u2502                                                                              \u2502\n\u2502 Just copy and paste this script into a new file, save it with a `.sh`        \u2502\n\u2502 extension (e.g., `create_alias.sh`), and then run it in your terminal using  \u2502\n\u2502 `bash create_alias.sh`. Let me know if you have any questions or need        \u2502\n\u2502 further help!                                                                \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>As you can see, the script is fine, but it doesn't look like a script. It looks like something you'd enter in a Markdown file that you'd expect to eventually be rendered as a script. We're going to make this look much nicer.</p>"},{"location":"200/chatbot-rulesets/10_markdown_madness/#markdown","title":"Markdown","text":""},{"location":"200/chatbot-rulesets/10_markdown_madness/#import","title":"Import","text":"<p>To get started, we need to update our imports by adding the <code>Markdown</code> class.</p> <pre><code>from rich.markdown import Markdown\n</code></pre> <p>The <code>Markdown</code> class for the <code>rich</code> library allows for rendering formatted Markdown text.</p>"},{"location":"200/chatbot-rulesets/10_markdown_madness/#using-it","title":"Using it","text":"<p>Next, we'll modify the <code>respond</code> method to use the <code>Markdown</code> class. There are a few things we'll need to do. First, we'll take the output of the chatbot's response and convert it into a formatted Markdown text using the following line:</p> <pre><code>        # ...\nresponse = data[\"response\"]\ncontinue_chatting = data[\"continue_chatting\"]\nformatted_response = Markdown(response)\n# ...\n</code></pre> <p>Then, we'll replace our <code>rprint</code> statement in the panel to use the <code>formatted_reponse</code> instead of the string we were sending earlier.</p> <pre><code>        # ...\nrprint(Panel.fit(formatted_response, width=80))\n# ...\n</code></pre> <p>Warning</p> <p>Make sure you don't do something like <code>rprint(Panel.fit(f\"Kiwi : {formatted_response}\", width=80))</code> because it will print out the object, not the data. </p> <p>Here's the new <code>respond</code> method in it's entirety:</p> <pre><code># Create a subclass for the Agent\nclass MyAgent(Agent):\ndef respond (self, user_input):\nagent_response = self.run(user_input)\ndata = json.loads(agent_response.output.value)\nresponse = data[\"response\"]\ncontinue_chatting = data[\"continue_chatting\"]\nformatted_response = Markdown(response)\nrprint(\"\")\nrprint(Panel.fit(formatted_response, width=80))\nrprint(\"\")\nreturn continue_chatting\n</code></pre>"},{"location":"200/chatbot-rulesets/10_markdown_madness/#update-ruleset","title":"Update Ruleset","text":"<p>Finally, we'll change our <code>json_ruleset</code> to ensure the response works with Markdown.</p> <p>Modify the second rule in the <code>json_ruleset</code> so it specifies the response should be able to be safely converted into markdown format.</p> <p><pre><code>        # ... previous code\nRule(\"The 'response' value should be a string that can be safely converted to markdown format. Include line returns when necessary.\"),\n# ...\n</code></pre> And the result. I've added a screenshot so you can see how much better it looks.</p> <p></p> <p>To see the enhanced code display in action, run your chatbot and observe the beautifully formatted code snippets that were previously plain text. Try creating tables, csv files, python, tasks lists, etc. Enjoy the new level of elegance and readability brought by Markdown magic!</p>"},{"location":"200/chatbot-rulesets/10_markdown_madness/#code-checkpoint","title":"Code Checkpoint","text":"<p>Before moving forward, make sure your code works as expected.</p> app.py<pre><code>from dotenv import load_dotenv\nimport logging\nimport json\n# Rich\nfrom rich import print as rprint\nfrom rich.panel import Panel\n# Griptape \nfrom griptape.structures import Agent\nfrom griptape.rules import Rule, Ruleset\n# Load environment variables\nload_dotenv()\n# Create a ruleset for the agent\nkiwi_ruleset = Ruleset(\nname = \"kiwi\",\nrules = [\nRule(\"You identify as a New Zealander.\"),\nRule(\"You have a strong kiwi accent.\")\n]\n)\njson_ruleset = Ruleset(\nname=\"json_ruleset\",\nrules=[\nRule(\"Respond in plain text only with JSON objects that have the following keys: response, continue_chatting.\"),\nRule(\"The 'response' value should be a string that is your response to the user.\"),\nRule(\"If it sounds like the person is done chatting, set 'continue_chatting' to False, otherwise it is True\"),\n]\n)\n# Create a subclass for the Agent\nclass MyAgent(Agent):\ndef respond (self, user_input):\nagent_response = agent.run(user_input)\ndata = json.loads(agent_response.output.value)\nresponse = data[\"response\"]\ncontinue_chatting = data[\"continue_chatting\"]\nrprint(\"\")\nrprint(Panel.fit(f\"Kiwi: {response}\", width=80))\nrprint(\"\")\nreturn continue_chatting\n# Create the agent\nagent = MyAgent(\nrulesets=[kiwi_ruleset, json_ruleset],\nlogger_level=logging.ERROR\n)\n# Chat function\ndef chat(agent):\nis_chatting = True\nwhile is_chatting:\nuser_input = input(\"Chat with Kiwi: \")\nis_chatting = agent.respond(user_input)\n# Introduce the agent\nagent.respond(\"Introduce yourself to the user.\")\n# Run the agent\nchat(agent)\n</code></pre>"},{"location":"200/chatbot-rulesets/10_markdown_madness/#next-steps","title":"Next Steps","text":"<p>In the next section, Improving the Prompt, we'll continue making things better by improving the appearance of the prompt.</p>"},{"location":"200/chatbot-rulesets/11_gleaming_the_chat/","title":"Improving the Prompt","text":"<p>In this stage, we'll improve the chatbot experience by using colors with the <code>rich</code> library. This will allow us to distinguish the chatbot's response from our prompt.</p>"},{"location":"200/chatbot-rulesets/11_gleaming_the_chat/#style-class","title":"Style Class","text":"<p>To add colors, we'll take advantage of the <code>Style</code> class from the <code>rich</code> library. This class allows you to use one of the 256 Standard Colors that are accepted in terminals, Hex values, or RGB values. It's pretty nice.</p>"},{"location":"200/chatbot-rulesets/11_gleaming_the_chat/#import","title":"Import","text":"<p>To add it, update the <code>import</code> section of your code to include the <code>Style</code> class:</p> <pre><code>from rich.style import Style\n</code></pre>"},{"location":"200/chatbot-rulesets/11_gleaming_the_chat/#color","title":"Color","text":"<p>Let's demonstrate how this works by updating our <code>respond</code> method to add some color.</p> <p>Change the <code>rprint</code> line to include the <code>style</code> attribute:</p> <p><pre><code>class MyAgent(Agent):\ndef chatbot(agent, user_input):\n# ...\nrprint(Panel.fit(formatted_response, \nwidth=80, \nstyle=Style(color=\"light_sea_green\")\n))\n# ...\n</code></pre> Let's see how it looks:</p> <p></p>"},{"location":"200/chatbot-rulesets/11_gleaming_the_chat/#prompt-class","title":"Prompt Class","text":"<p>We can also take advantage of a <code>Prompt</code> class in the <code>rich</code> library to make our prompt a bit nicer to look at by separating the color of the prompt from the text the user enters.</p>"},{"location":"200/chatbot-rulesets/11_gleaming_the_chat/#import_1","title":"Import","text":"<p>First, import the Prompt class:</p> <pre><code>from rich.prompt import Prompt\n</code></pre>"},{"location":"200/chatbot-rulesets/11_gleaming_the_chat/#prompt","title":"Prompt","text":"<p>Then, change the <code>input</code> line in the <code>chat</code> function to use the <code>Prompt.ask()</code> function:</p> <pre><code>def chat(agent):\n# ...\nuser_input = Prompt.ask(\"[grey50]Chat with Kiwi:\")\n# ...\n</code></pre> <p>In this updated code, we replace the standard <code>input</code> function with <code>Prompt.ask()</code> and pass it a color to create an improved prompt. Of course, you can choose whatever color you want to make it stand out even more. </p> <p></p> <p>There are a few interesting options with the Prompt class that are worth exploring, including default values, a list of choices, and more. Check out the documentation for more goodness.</p>"},{"location":"200/chatbot-rulesets/11_gleaming_the_chat/#try-it","title":"Try it","text":"<p>Engage in a conversation with Kiwi and enjoy the interactive and intuitive nature of the prompt. Respond to the prompt using natural language, and observe the chatbot's responses displayed in the familiar chat-like format.</p>"},{"location":"200/chatbot-rulesets/11_gleaming_the_chat/#code-review","title":"Code Review","text":"app.py<pre><code>from dotenv import load_dotenv\nimport logging\nimport json\n# Rich\nfrom rich import print as rprint\nfrom rich.panel import Panel\nfrom rich.markdown import Markdown\nfrom rich.style import Style\nfrom rich.prompt import Prompt\n# Griptape \nfrom griptape.structures import Agent\nfrom griptape.rules import Rule, Ruleset\n# Load environment variables\nload_dotenv()\n# Create a ruleset for the agent\nkiwi_ruleset = Ruleset(\nname = \"kiwi\",\nrules = [\nRule(\"You identify as a New Zealander.\"),\nRule(\"You have a strong kiwi accent.\")\n]\n)\njson_ruleset = Ruleset(\nname=\"json_ruleset\",\nrules=[\nRule(\"Respond in plain text only with JSON objects that have the following keys: response, continue_chatting.\"),\nRule(\"The 'response' value should be a string that can be safely converted to markdown format.\"),\nRule(\"If it sounds like the person is done chatting, set 'continue_chatting' to False, otherwise it is True\"),\n]\n)\n# Create a subclass for the Agent\nclass MyAgent(Agent):\ndef respond (self, user_input):\nagent_response = agent.run(user_input)\ndata = json.loads(agent_response.output.value)\nresponse = data[\"response\"]\ncontinue_chatting = data[\"continue_chatting\"]\nformatted_response = Markdown(response)\nprint(\"\")\nrprint(Panel.fit(formatted_response, \nwidth=80, \nstyle=Style(color=\"light_sea_green\")\n))\nprint(\"\")\nreturn continue_chatting\n# Create the agent\nagent = MyAgent(\nrulesets=[kiwi_ruleset, json_ruleset],\nlogger_level=logging.ERROR\n)\n# Chat function\ndef chat(agent):\nis_chatting = True\nwhile is_chatting:\nuser_input = Prompt.ask(\"[grey50]Chat with Kiwi:\")\nis_chatting = agent.respond(user_input)\n# Introduce the agent\nagent.respond(\"Introduce yourself to the user.\")\n# Run the agent\nchat(agent)\n</code></pre>"},{"location":"200/chatbot-rulesets/11_gleaming_the_chat/#next-steps","title":"Next Steps","text":"<p>In the next section, Multiple Personas, we'll dive into an explosion of personality by using Rulesets to create multiple personas to chat with.</p>"},{"location":"200/chatbot-rulesets/12_multiple_personas/","title":"Multiple Personas","text":"<p>In this exciting stage, we're going to give our chatbot multiple personalities to make conversations even more dynamic and engaging. Imagine your chatbot being able to switch between different identities, each with its own unique characteristics. Let's get started!</p>"},{"location":"200/chatbot-rulesets/12_multiple_personas/#rulesets","title":"Rulesets","text":""},{"location":"200/chatbot-rulesets/12_multiple_personas/#creating-personas","title":"Creating Personas","text":"<p>To give our chatbot multiple personas, we'll create separate rulesets for each identity. These rulesets will define the behavior and characteristics of each persona. Here, I've added two new rulesets: \"Zelda\" (my grandmother), and \"Dad\" (my dad). </p> <pre><code># Create rulesets for each persona\nkiwi_ruleset = Ruleset(\nname='Kiwi',\nrules=[\nRule('You identify only as a New Zealander.'),\nRule('You have a very strong Kiwi accent.')\n]\n)\nzelda_ruleset = Ruleset(\nname='Zelda',\nrules=[\nRule('You identify only as a grandmother.'),\nRule('You like to use Yiddish.')\n]\n)\ndad_ruleset = Ruleset(\nname='Dad',\nrules=[\nRule('You identify only as a dad.'),\nRule('You like to use dad jokes.')\n]\n)\n</code></pre>"},{"location":"200/chatbot-rulesets/12_multiple_personas/#switching-personas","title":"Switching Personas","text":"<p>We can't just give the chatbot all these personas and expect it to know what to do. We need to provide some structure around it. So we're going to create another ruleset called the Switcher. This ruleset will understand how and when to switch personalities. There are some key rules for us to think of:</p> <ul> <li>We want the chatbot to be able to switch personalities when it makes sense to (either it thinks it needs to, or the user asks for it)</li> <li>We don't want it to identify as the \"Switcher\" or \"json_output\" rulesets. That wouldn't make any sense.</li> <li>When it does switch rulesets, it should only take on the new persona</li> <li>When it switches personas, it should remember the facts from the previous conversation, but not act like the previous identity.</li> </ul> <pre><code>switcher_ruleset = Ruleset(\nname='Switcher',\nrules=[\nRule(\"IMPORTANT: you have the ability to switch identities when you find it appropriate.\"),\nRule(\"IMPORTANT: You can not identify as 'Switcher' or 'json_output'.\"),\nRule(\"IMPORTANT: When you switch identities, you only take on the persona of the new identity.\"),\nRule(\"IMPORTANT: When you switch identities, you remember the facts from your conversation, but you do not act like your old identity.\"),\n]\n)\n</code></pre>"},{"location":"200/chatbot-rulesets/12_multiple_personas/#add-the-rulesets","title":"Add the Rulesets","text":"<p>Let's now give the agent all these rulesets to work with. We'll simply add them to the list of <code>rulesets</code> in the <code>agent</code> instantiation.</p> <pre><code># Create the agent\nagent = MyAgent(\nrulesets=[\nkiwi_ruleset, zelda_ruleset, dad_ruleset, \nswitcher_ruleset, json_ruleset\n],\nlogger_level=logging.ERROR\n)\n</code></pre>"},{"location":"200/chatbot-rulesets/12_multiple_personas/#prompt-adjustment","title":"Prompt Adjustment","text":"<p>It doesn't make sense for us to keep prompting the user to \"Chat with Kiwi:\" if we might have multiple personalities, so let's modify the <code>Prompt</code> in the <code>chat</code> function:</p> <pre><code>def chat(agent):\n# ...\nuser_input = Prompt.ask(\"[grey50]Chat\")\n# ...\n</code></pre>"},{"location":"200/chatbot-rulesets/12_multiple_personas/#chat","title":"Chat","text":"<p>Now your chatbot is ready to switch between different personalities and engage in exciting conversations with users! Go ahead and run the chatbot. Ask it how many personalities it has, ask it to switch them up, etc. See how it performs. </p> <p></p> <p>Notice in the above image we've got two personas talking, but it's difficult to tell them apart. We'll fix that in the next section.</p>"},{"location":"200/chatbot-rulesets/12_multiple_personas/#code-review","title":"Code Review","text":"<p>We're making great progress. Review the code.</p> app.py<pre><code>from dotenv import load_dotenv\nimport logging\nimport json\n# Rich\nfrom rich import print as rprint\nfrom rich.panel import Panel\nfrom rich.markdown import Markdown\nfrom rich.style import Style\nfrom rich.prompt import Prompt\n# Griptape \nfrom griptape.structures import Agent\nfrom griptape.rules import Rule, Ruleset\n# Load environment variables\nload_dotenv()\n# Create rulesets for each persona\nkiwi_ruleset = Ruleset(\nname='Kiwi',\nrules=[\nRule('You identify only as a New Zealander.'),\nRule('You have a very strong Kiwi accent.')\n]\n)\nzelda_ruleset = Ruleset(\nname='Zelda',\nrules=[\nRule('You identify only as a grandmother.'),\nRule('You like to use Yiddish.')\n]\n)\ndad_ruleset = Ruleset(\nname='Dad',\nrules=[\nRule('You identify only as a dad.'),\nRule('You like to use dad jokes.')\n]\n)\nswitcher_ruleset = Ruleset(\nname='Switcher',\nrules=[\nRule(\"IMPORTANT: you have the ability to switch identities when you find it appropriate.\"),\nRule(\"IMPORTANT: You can not identify as 'Switcher' or 'json_output'.\"),\nRule(\"IMPORTANT: When you switch identities, you only take on the persona of the new identity.\"),\nRule(\"IMPORTANT: When you switch identities, you remember the facts from your conversation, but you do not act like your old identity.\"),\n]\n)\njson_ruleset = Ruleset(\nname=\"json_ruleset\",\nrules=[\nRule(\"Respond in plain text only with JSON objects that have the following keys: response, continue_chatting.\"),\nRule(\"The 'response' value should be a string that can be safely converted to markdown format.\"),\nRule(\"If it sounds like the person is done chatting, set 'continue_chatting' to False, otherwise it is True\"),\n]\n)\n# Create a subclass for the Agent\nclass MyAgent(Agent):\ndef respond (self, user_input):\nagent_response = agent.run(user_input)\ndata = json.loads(agent_response.output.value)\nresponse = data[\"response\"]\ncontinue_chatting = data[\"continue_chatting\"]\nformatted_response = Markdown(response)\nprint(\"\")\nrprint(Panel.fit(formatted_response, \nwidth=80, \nstyle=Style(color=\"light_sea_green\")\n))\nprint(\"\")\nreturn continue_chatting\n# Create the agent\nagent = MyAgent(\nrulesets=[\nkiwi_ruleset, zelda_ruleset, dad_ruleset,\nswitcher_ruleset, json_ruleset  \n],\nlogger_level=logging.ERROR\n)\n# Chat function\ndef chat(agent):\nis_chatting = True\nwhile is_chatting:\nuser_input = Prompt.ask(\"[grey50]Chat\")\nis_chatting = agent.respond(user_input)\n# Introduce the agent\nagent.respond(\"Introduce yourself.\")\n# Run the agent#\nchat(agent)\n</code></pre>"},{"location":"200/chatbot-rulesets/12_multiple_personas/#next-steps","title":"Next Steps","text":"<p>In the next stage: Colorful Personalities, we'll make it easier to differentiate between which chatbot you're speaking with.</p>"},{"location":"200/chatbot-rulesets/13_adding_personality_colors/","title":"Colorful Personalities","text":"<p>In this step, we're going to add some flair to our chatbot by assigning different colors to each persona. This will visually distinguish the different personalities, making the conversation more engaging and fun! </p> <p>We'll do this by giving each persona a favorite color, then add another key to our <code>json_output</code> ruleset, and use that key in our <code>respond</code> method.</p>"},{"location":"200/chatbot-rulesets/13_adding_personality_colors/#updating-rulesets","title":"Updating Rulesets","text":""},{"location":"200/chatbot-rulesets/13_adding_personality_colors/#favorite-colors","title":"Favorite Colors","text":"<p>To assign colors to each persona, we'll add new rules to each of our identity ruleset to give them all favorite colors. You're welcome to use Standard Colors, Hex, or rgb values. Whatever makes you happy.</p> <pre><code>kiwi_ruleset = Ruleset(\nname = \"kiwi\",\nrules = [\n# ... truncated for brevity\nRule(\"Favorite color: light_sea_green\")\n]\n)\nzelda_ruleset = Ruleset(\nname=\"Zelda\",\nrules=[\n# ...\nRule(\"Favorite color: light_pink3\")\n]\n)\ndad_ruleset = Ruleset(\nname=\"Dad\",\nrules=[\n# ... \nRule(\"Favorite color: light_steel_blue\")\n]\n)\n</code></pre>"},{"location":"200/chatbot-rulesets/13_adding_personality_colors/#add-key","title":"Add Key","text":"<p>We also need to make changes to the <code>json_ruleset</code> to include the Favorite Color key. Modify the first rule to include that key:</p> <pre><code>json_ruleset = Ruleset(\nname=\"json_ruleset\",\nrules=[\nRule(\"Respond in plain text only with JSON objects that have the following keys: response, favorite_color, continue_chatting.\"),\n# ... \n]\n)\n</code></pre>"},{"location":"200/chatbot-rulesets/13_adding_personality_colors/#respond-method","title":"Respond Method","text":"<p>Next, we'll adjust the <code>respond</code> method get the favorite color, and use it properly.</p>"},{"location":"200/chatbot-rulesets/13_adding_personality_colors/#get-the-color","title":"Get the color","text":"<p>After the <code>continue_chatting = data[\"continue_chatting\"]</code> line, add one to get the color:</p> <pre><code>class MyAgent(Agent):\ndef respond(self, user_input):\n# ...\ncontinue_chatting = data[\"continue_chatting\"]\ncolor = data[\"favorite_color\"]\n# ...\n</code></pre>"},{"location":"200/chatbot-rulesets/13_adding_personality_colors/#use-it","title":"Use it","text":"<p>Then, update the <code>style</code> line in the <code>rprint</code> statement to use <code>color</code> instead of specifying it directly as we were before:</p> <pre><code>class MyAgent(Agent):\ndef respond(self, user_input):\n# ...\nrprint(Panel.fit(formatted_response, \nwidth=80, \nstyle=Style(color=color)\n))\n# ...\n</code></pre>"},{"location":"200/chatbot-rulesets/13_adding_personality_colors/#try-it","title":"Try it","text":"<p>Run the code and notice how much nicer it is to be able to discern who is talking based on their color.</p> <p></p>"},{"location":"200/chatbot-rulesets/13_adding_personality_colors/#adding-a-name","title":"Adding a Name","text":"<p>We're not quite finished yet. We also can make things a bit easier to follow if we clarify the name of the persona we're chatting with.</p>"},{"location":"200/chatbot-rulesets/13_adding_personality_colors/#update-ruleset","title":"Update Ruleset","text":"<p>This will be a relatively quick fix. We just need to add another key to the <code>json_ruleset</code>, and then modify the <code>rprint</code> statement again.</p> <p>First, add the <code>name</code> key:</p> <pre><code>json_ruleset = Ruleset(\nname=\"json_ruleset\",\nrules=[\n# ...\nRule(\"Respond in plain text only with JSON objects that have the following keys: name, response, favorite_color, continue_chatting.\"),\n# ...\n]\n)\n</code></pre>"},{"location":"200/chatbot-rulesets/13_adding_personality_colors/#get-the-name","title":"Get the Name","text":"<p>Now get the <code>name</code> from the json data in the <code>respond</code> method of the <code>MyAgent</code> class:</p> <pre><code>class MyAgent(Agent):\ndef respond(self, user_input):\n# ...\ncolor = data[\"favorite_color\"]\nname = data[\"name\"]\n# ...\n</code></pre>"},{"location":"200/chatbot-rulesets/13_adding_personality_colors/#use-it_1","title":"Use it","text":"<p>Then, add a <code>title</code> and <code>title_align</code> in the <code>rprint</code> function:</p> <pre><code>class MyAgent(Agent):\ndef respond(self, user_input):\n# ...\nrprint(Panel.fit(formatted_response, \nwidth=80, \nstyle=Style(color=color),\ntitle=name,\ntitle_align=\"left\"\n))\n# ...\n</code></pre>"},{"location":"200/chatbot-rulesets/13_adding_personality_colors/#try-it_1","title":"Try it","text":"<p>Give it a try and see how much nicer it is!</p> <p></p>"},{"location":"200/chatbot-rulesets/13_adding_personality_colors/#code-review","title":"Code Review","text":"<p>Lots of changes in this section, with some great usability enhancements! </p> app.py<pre><code>from dotenv import load_dotenv\nimport logging\nimport json\n# Rich\nfrom rich import print as rprint\nfrom rich.panel import Panel\nfrom rich.markdown import Markdown\nfrom rich.style import Style\nfrom rich.prompt import Prompt\n# Griptape \nfrom griptape.structures import Agent\nfrom griptape.rules import Rule, Ruleset\n# Load environment variables\nload_dotenv()\n# Create rulesets for each persona\nkiwi_ruleset = Ruleset(\nname='Kiwi',\nrules=[\nRule('You identify only as a New Zealander.'),\nRule('You have a very strong Kiwi accent.'),\nRule(\"Favorite color: light_sea_green\")\n]\n)\nzelda_ruleset = Ruleset(\nname='Zelda',\nrules=[\nRule('You identify only as a grandmother.'),\nRule('You like to use Yiddish.'),\nRule(\"Favorite color: light_pink3\")\n]\n)\ndad_ruleset = Ruleset(\nname='Dad',\nrules=[\nRule('You identify only as a dad.'),\nRule('You like to use dad jokes.'),\nRule(\"Favorite color: light_steel_blue\")\n]\n)\nswitcher_ruleset = Ruleset(\nname='Switcher',\nrules=[\nRule(\"IMPORTANT: you have the ability to switch identities when you find it appropriate.\"),\nRule(\"IMPORTANT: You can not identify as 'Switcher' or 'json_output'.\"),\nRule(\"IMPORTANT: When you switch identities, you only take on the persona of the new identity.\"),\nRule(\"IMPORTANT: When you switch identities, you remember the facts from your conversation, but you do not act like your old identity.\"),\n]\n)\njson_ruleset = Ruleset(\nname=\"json_ruleset\",\nrules=[\nRule(\"Respond in plain text only with JSON objects that have the following keys: name, response, favorite_color, continue_chatting.\"),\nRule(\"The 'response' value should be a string that can be safely converted to markdown format.\"),\nRule(\"If it sounds like the person is done chatting, set 'continue_chatting' to False, otherwise it is True\"),\n]\n)\n# Create a subclass for the Agent\nclass MyAgent(Agent):\ndef respond (self, user_input):\nagent_response = agent.run(user_input)\ndata = json.loads(agent_response.output.value)\nresponse = data[\"response\"]\ncontinue_chatting = data[\"continue_chatting\"]\ncolor = data[\"favorite_color\"]\nname = data[\"name\"]\nformatted_response = Markdown(response)\nprint(\"\")\nrprint(Panel.fit(formatted_response, \nwidth=80, \nstyle=Style(color=color),\ntitle=name,\ntitle_align=\"left\"\n))\nprint(\"\")\nreturn continue_chatting\n# Create the agent\nagent = MyAgent(\nrulesets=[\nkiwi_ruleset, zelda_ruleset, dad_ruleset,\nswitcher_ruleset, json_ruleset  \n],\nlogger_level=logging.ERROR\n)\n# Chat function\ndef chat(agent):\nis_chatting = True\nwhile is_chatting:\nuser_input = Prompt.ask(\"[grey50]Chat\")\nis_chatting = agent.respond(user_input)\n# Introduce the agent\nagent.respond(\"Introduce yourself.\")\n# Run the agent#\nchat(agent)\n</code></pre>"},{"location":"200/chatbot-rulesets/13_adding_personality_colors/#next-steps","title":"Next Steps","text":"<p>In the next stage: Quick Feedback, we'll make the chatbot feel a bit more responsive to user input by giving it a spinner so it doesn't feel like it's lagging while the LLM is fetching it's response.</p>"},{"location":"200/chatbot-rulesets/14_making_it_quick/","title":"Quick Feedback","text":""},{"location":"200/chatbot-rulesets/14_making_it_quick/#ux-enhancement","title":"UX Enhancement","text":"<p>The UX of our application can be enhanced by letting the user know that the application is working after they execute a command. At the moment, it is processing, but it just doesn't let the user know. We'll use the Spinner functionality from the Rich library to make the application a little more user-friendly and  visually appealing.</p>"},{"location":"200/chatbot-rulesets/14_making_it_quick/#spinner","title":"Spinner","text":"<p>The <code>Console</code> class has a <code>status</code> method which will allow us to display a <code>Spinner</code> to the user while Griptape is waiting for the LLM response.</p> <p>Abstract</p> <p>There are lots of spinners available. You can check them out by running the following in your terminal:</p> <pre><code>python -m rich.spinner\n</code></pre> <p></p>"},{"location":"200/chatbot-rulesets/14_making_it_quick/#importing-the-console","title":"Importing the Console","text":"<pre><code>from rich.console import Console\n</code></pre> <p>Importing the Console class from the <code>rich</code> library is simple and straightforward, and should be familliar to you by this point in the lesson.</p>"},{"location":"200/chatbot-rulesets/14_making_it_quick/#modify-respond","title":"Modify Respond","text":"<p>We will add a spinner to our <code>respond</code> method in the <code>MyAgent</code> subclass. This will show an animated spinner in the console while our agent is processing the user's input. This makes the app feel more responsive.</p> <p>Update the <code>respond</code> method as follows:</p> <pre><code>class MyAgent(Agent):\ndef respond(self, user_input):\nconsole = Console()\nwith console.status(spinner=\"simpleDotsScrolling\", status=\"\"):\nagent_response = self.run(user_input)\n# ...\n</code></pre> <p>In the code above, <code>console.status(spinner=\"simpleDotsScrolling\", status=\"\")</code> starts an animated spinner in the console that will run until the block of code it is wrapping (the agent's processing of user input) completes. </p> <p>Note</p> <p>We've left <code>status</code> blank - because we don't really need to send any text. However, feel free to add some text here if you desire.</p> <p>Now when you run the chat, you'll notice the animated spinner right after you ask the chatbot a question!</p> <p></p>"},{"location":"200/chatbot-rulesets/14_making_it_quick/#code-review","title":"Code Review","text":"<p>Double-check your code to make sure the spinner is working as expected.</p> app.py<pre><code>from dotenv import load_dotenv\nimport logging\nimport json\n# Rich\nfrom rich import print as rprint\nfrom rich.panel import Panel\nfrom rich.markdown import Markdown\nfrom rich.style import Style\nfrom rich.prompt import Prompt\nfrom rich.console import Console\n# Griptape \nfrom griptape.structures import Agent\nfrom griptape.rules import Rule, Ruleset\n# Load environment variables\nload_dotenv()\n# Create rulesets for each persona\nkiwi_ruleset = Ruleset(\nname='Kiwi',\nrules=[\nRule('You identify only as a New Zealander.'),\nRule('You have a very strong Kiwi accent.'),\nRule(\"Favorite color: light_sea_green\")\n]\n)\nzelda_ruleset = Ruleset(\nname='Zelda',\nrules=[\nRule('You identify only as a grandmother.'),\nRule('You like to use Yiddish.'),\nRule(\"Favorite color: light_pink3\")\n]\n)\ndad_ruleset = Ruleset(\nname='Dad',\nrules=[\nRule('You identify only as a dad.'),\nRule('You like to use dad jokes.'),\nRule(\"Favorite color: light_steel_blue\")\n]\n)\nswitcher_ruleset = Ruleset(\nname='Switcher',\nrules=[\nRule(\"IMPORTANT: you have the ability to switch identities when you find it appropriate.\"),\nRule(\"IMPORTANT: You can not identify as 'Switcher' or 'json_output'.\"),\nRule(\"IMPORTANT: When you switch identities, you only take on the persona of the new identity.\"),\nRule(\"IMPORTANT: When you switch identities, you remember the facts from your conversation, but you do not act like your old identity.\"),\n]\n)\njson_ruleset = Ruleset(\nname=\"json_ruleset\",\nrules=[\nRule(\"Respond in plain text only with JSON objects that have the following keys: name, response, favorite_color, continue_chatting.\"),\nRule(\"The 'response' value should be a string that can be safely converted to markdown format.\"),\nRule(\"If it sounds like the person is done chatting, set 'continue_chatting' to False, otherwise it is True\"),\n]\n)\n# Create a subclass for the Agent\nclass MyAgent(Agent):\ndef respond (self, user_input):\nconsole = Console()\nwith console.status(spinner=\"simpleDotsScrolling\", status=\"\"):\nagent_response = self.run(user_input)\ndata = json.loads(agent_response.output.value)\nresponse = data[\"response\"]\ncontinue_chatting = data[\"continue_chatting\"]\ncolor = data[\"favorite_color\"]\nname = data[\"name\"]\nformatted_response = Markdown(response)\nprint(\"\")\nrprint(Panel.fit(formatted_response, \nwidth=80, \nstyle=Style(color=color),\ntitle=name,\ntitle_align=\"left\"\n))\nprint(\"\")\nreturn continue_chatting\n# Create the agent\nagent = MyAgent(\nrulesets=[\nkiwi_ruleset, zelda_ruleset, dad_ruleset,\nswitcher_ruleset, json_ruleset  \n],\nlogger_level=logging.ERROR\n)\n# Chat function\ndef chat(agent):\nis_chatting = True\nwhile is_chatting:\nuser_input = Prompt.ask(\"[grey50]Chat\")\nis_chatting = agent.respond(user_input)\n# Introduce the agent\nagent.respond(\"Introduce yourself.\")\n# Run the agent#\nchat(agent)\n</code></pre>"},{"location":"200/chatbot-rulesets/14_making_it_quick/#all-done","title":"All Done!","text":"<p>Success</p> <p>You did it!</p> <p>That's it! We've come a long way in this tutorial series and now you have a multi-persona chat application written with Griptape. Hopefully you've been able to see how using Rulesets can be used for both creative and structural control of your applications.</p> <p>Congratulations on making it through! We're thrilled you decided to join us for this course and we hope you've enjoyed it as much as we have. We'd love to hear your feedback, so please don't hesitate to let us know what you thought.</p> <p>More importantly, we wish you all the best as you continue your journey with Griptape and Python. Remember to have fun, experiment, and keep on learning. Happy coding! \ud83d\ude80</p>"},{"location":"200/compare-movies-workflow/","title":"Cinematic Understanding through Workflows","text":""},{"location":"200/compare-movies-workflow/#course-description","title":"Course Description","text":"<p>Step into the dynamic realm of Griptape.ai's Workflows where we're more than just about decoding movie plots; we're about mastering the art of task relationships. This course is a journey through setting up parent-child tasks, managing varied inputs, and converging them for insightful conclusions. Using movie narratives as our backdrop, you'll gain practical experience in establishing inter-task connections and seeing how they collaboratively weave a coherent story. Ideal for those keen on understanding the intricacies of Griptape's Workflows while engaging in a compelling thematic exploration.</p> <pre><code>graph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt; |YES| C[Hmm..];</code></pre>"},{"location":"200/compare-movies-workflow/#who-is-this-course-for","title":"Who is this course for?","text":"<p>This course is aimed at intermediate level Python developers who are interested in learning about Workflows and how to handle parent/child task relationships. </p>"},{"location":"200/compare-movies-workflow/#prerequisites","title":"Prerequisites","text":"<p>Before beginning this course, you will need:</p> <ul> <li>An OpenAI API Key (available here: https://beta.openai.com/account/api-keys)</li> <li>Python3.9+ installed on your machine</li> <li>An IDE (such as Visual Studio Code or PyCharm) to write and manage your code</li> </ul> <p>If you don't have those items available, it's highly recommended you go through the Griptape Setup - Visual Studio Code course to set up your environment.</p>"},{"location":"200/compare-movies-workflow/#course-outline","title":"Course Outline","text":"<p>The course will cover ..</p> <p>By the end of this course, you'll have ...</p>"},{"location":"200/compare-movies-workflow/#useful-resources","title":"Useful Resources","text":"<p>These resources will provide additional information and context throughout the course:</p> <ul> <li>Griptape Documentation</li> <li>Visual Studio Code</li> </ul>"},{"location":"200/compare-movies-workflow/#next-steps","title":"Next Steps","text":""},{"location":"300/","title":"300 Advanced - \"The Ollie\"","text":"<p>Delve deeper into the intricate workings of Griptape with our Advanced courses. Prepare yourself for a comprehensive exploration of high-level concepts, technical details, and extensive use cases. These in-depth courses are designed to satisfy your thirst for knowledge and challenge your understanding, opening doors to advanced Griptape applications and boosting your coding prowess.</p> <p>Why Ollie?</p> <p>The ollie is a fundamental skateboarding trick that involves leaping into the air without the use of the rider's hands, but rather by exerting pressure on the tail of the board while jumping. Named after its inventor, Alan \"Ollie\" Gelfand, the trick requires skill and practice, much like our Advanced courses, where you delve deeper into the intricate workings and technical details of Griptape.</p>"},{"location":"400/","title":"400 Expert - \"McTwist\"","text":"<p>Step into the realm of the extraordinary with our Expert courses, where Griptape truly shines. This is where we push the boundaries of what's possible, showcasing how to leverage Griptape to create insanely awesome AI systems. These courses are designed for those who dare to innovate, reinvent, and redefine the landscape of AI, leading the charge in the revolution of generative AI.</p> <p>What's a McTwist?</p> <p>The McTwist is an extremely difficult skateboarding trick, invented by Mike McGill, involving a 540-degree flip while the skater is airborne. It's a daring move that demands a high level of skill and confidence, perfectly symbolizing our Expert level where we push the boundaries of what's possible with Griptape, and you become a master of your craft. It's called the McTwist as a homage to its creator, McGill.</p>"},{"location":"setup/","title":"Setting Up Your Python Environment for Griptape","text":""},{"location":"setup/#kickoff-and-foundations","title":"Kickoff and Foundations","text":"<p>Welcome to the getting started course for Griptape. We'll be using Visual Studio Code and the Griptape library, which make a great combo for coding with Large Language Models (LLMs). </p>"},{"location":"setup/#what-will-i-learn","title":"What will I learn?","text":"<p>By the end of the course you will have the ability to use Griptape to work with Large Language Models. You will be setting up your Python environment, install a code editor, install Griptape, and be ready to go.</p> griptape_developer.py<pre><code>from dotenv import load_dotenv\nfrom griptape.structures import Agent\nload_dotenv()\n# Create an agent\nagent = Agent()\n# Run the agent\nagent.run(\"Hello! I'm a new Griptape Developer!\")\n</code></pre>"},{"location":"setup/#who-is-this-course-for","title":"Who is this course for?","text":"<p>This course is aimed at beginners to intermediate level Python developers who are interested in setting up a Python environment to develop tools and applications with Griptape.</p>"},{"location":"setup/#why-visual-studio-code","title":"Why Visual Studio Code?","text":"<p>Using the right coding software (or Integrated Development Environment - IDE) can make your coding sessions a breeze... or not (if you choose the wrong one).</p> <p>Visual Studio Code (VS Code for short) is our IDE of choice for a few reasons. It's lightweight, highly customizable, and has a vast range of extensions. </p>"},{"location":"setup/#griptape-and-python","title":"Griptape and Python","text":"<p>Griptape provides a simple, Pythonic interface to interact with these models, taking care of the complexities so we can focus on coding our applications. </p> <p>In the next stages, we will be going through:</p> <ul> <li> <p>Setting Up: Here, we will install and set up the basic tools we need: Visual Studio Code, Python, and create our directory structure. We'll also ensure that you have the right Python environment in place.</p> </li> <li> <p>OpenAI API Key: Before jumping into Griptape, we need to get our OpenAI API Key and set up our environment so it's ready.</p> </li> <li> <p>Griptape: We'll install the Griptape library and send our first message to the LLM!</p> </li> </ul> <p>Are you ready to get started? Let's move on to Setting up your environment!</p>"},{"location":"setup/01_setting_up_environment/","title":"Software","text":""},{"location":"setup/01_setting_up_environment/#overview","title":"Overview","text":"<p>Setting up our development environment correctly is vital for smooth and successful coding. In this stage, we'll go through all the necessary installations and configurations.</p>"},{"location":"setup/01_setting_up_environment/#installing-python","title":"Installing Python","text":"<p> Before getting started with Griptape, you'll need to install Python.</p> <p>Info</p> <p>Griptape requires a minimum Python version of 3.9, but feel free to install a more recent version if you wish. </p>"},{"location":"setup/01_setting_up_environment/#windows-or-linux","title":"Windows or Linux","text":"<ol> <li>Head over to the official Python downloads page</li> <li>Click on the button that says \"Python 3.9.x\" (or the most recent 3.9 version) to download the installer</li> <li>Run the installer, and make sure to check the box that says \"Add Python 3.9 to PATH\" before you click \"Install Now\"</li> </ol>"},{"location":"setup/01_setting_up_environment/#macos","title":"macOS","text":"<p>If you have Homebrew installed:</p> <ol> <li>Open your terminal</li> <li>Run the <code>command brew install python@3.9</code></li> <li>After the installation is complete, run <code>brew link python@3.9</code></li> </ol> <p>Info</p> <p>If you don't have Homebrew, you can install Python from the official website as mentioned above.</p> <p>You did it!</p> <p>Congratulations, you've got Python!</p>"},{"location":"setup/01_setting_up_environment/#visual-studio-code","title":"Visual Studio Code","text":""},{"location":"setup/01_setting_up_environment/#installing","title":"Installing","text":"<p>Visual Studio Code (VS Code) provides the perfect environment for our Python coding.</p> <ol> <li>Go to the VS Code download page</li> <li>Download the version appropriate for your OS (Windows, Linux, or macOS)</li> <li>Run the installer and follow the prompts</li> </ol> <p>Success</p> <p>VS Code is now installed!</p>"},{"location":"setup/01_setting_up_environment/#creating-the-project-folder","title":"Creating the Project Folder","text":"<p>Before we dive into coding, let's create a dedicated space for our project. Having a clean organized directory structure makes coding and managing your projects much easier.</p> <p>First, you'll want to create a new folder on your computer where all the code for this project will live. You can create this folder anywhere you like. Here's how you can do it via your Terminal:</p> <pre><code>mkdir griptape-starter\ncd griptape-starter\n</code></pre> <p>This creates a new folder called \"griptape_intro\" and moves into it.</p> <p>Alternatively, feel free to open up Visual Studio Code and create a new folder: 1. Choose File -&gt; Open Folder.. 1. Choose New Folder 1. Enter the name of your new folder. Example: <code>griptape-starter</code> 1. Choose Create 1. Double-click on the newly created folder to open it.</p>"},{"location":"setup/01_setting_up_environment/#virtual-environments","title":"Virtual Environments","text":""},{"location":"setup/01_setting_up_environment/#using-vs-codes-python-environment-manager","title":"Using VS Code's Python Environment Manager","text":"<p>Python virtual environments are essential tools for keeping your projects organized and isolated. They allow each project to have its own set of dependencies, ensuring that different projects won't interfere with each other, which is vital when different projects require different versions of the same library. By using virtual environments, you can maintain a clean, conflict-free workspace for each project, making it easier to manage your code and troubleshoot any issues.</p> <p>Many developers use their terminal to manage their Python virtual environments. As this is a beginner level course, we'll use an Extension inside VS Code instead because it makes this a little bit easier.</p> <ol> <li>With VS Code open, go to the Extensions tab, or choose View --&gt; Extensions</li> <li>Search for <code>Python Environment Manager</code>, or go to Python Environment Manager in your web browser.</li> <li>Choose <code>Install</code></li> <li>Open the Command Palette (<code>Ctrl</code>+<code>Shift</code>+<code>P</code> on Windows/Linux, <code>Cmd</code>+<code>Shift</code>+<code>P</code> on macOS), or choose View --&gt; Command Palette..</li> <li> <p>Search for <code>Python: Create Environment</code> and you should see it come up at the top of the command list.     </p> </li> <li> <p>Hit return with that item selected and choose <code>.Venv: Creates a '.venv' virtual environment in the current workspace</code></p> <p></p> </li> <li> <p>Then choose a python version.</p> <p></p> <p>Note: This will create the virtual environment for you within the current directory. </p> <ul> <li>This creates a new virtual environment in a folder called <code>.venv</code> and activates the environment for you.</li> </ul> </li> </ol> <p>Now you've set up your Python environment for this project. This way, anything you install or change in Python won't affect other projects.</p>"},{"location":"setup/01_setting_up_environment/#confirm-its-working","title":"Confirm it's working","text":"<p>To be sure that your virtual environment is set up correctly, we'll check by opening a Terminal. If everything is set correctly, you'll see <code>.venv</code> in your terminal prompt.</p> <ol> <li>Open the terminal in VS Code by clicking on <code>Terminal -&gt; New Terminal</code></li> </ol> <p></p> <p>Note</p> <p>You should see <code>.venv</code> in your prompt. If you don't see it, please run through the previous documentation to try again. </p>"},{"location":"setup/01_setting_up_environment/#next-step","title":"Next Step","text":"<p>You now have Python and VS Code installed, and you've got a working virtual environment! In the next section, we'll set up your OpenAI API key so you can communicate with their large language model. </p>"},{"location":"setup/02_openai/","title":"OpenAI","text":""},{"location":"setup/02_openai/#overview","title":"Overview","text":""},{"location":"setup/02_openai/#openai","title":"OpenAI","text":""},{"location":"setup/02_openai/#obtaining-the-api-key","title":"Obtaining the API Key","text":"<p>In order to communicate with an LLM using Griptape, we'll need a key. To do this, we'll grab an API key from OpenAI.</p> <p>Tip</p> <p>Griptape can work with many large language models, but to keep things simple for now, we'll just focus on OpenAI's gpt model.</p> <ol> <li>Go to the OpenAI website and sign up for an account if you don't have one already.</li> <li> <p>After logging in, navigate to the API section of your dashboard.</p> <p></p> </li> <li> <p>Choose Create a new secret key in order to create a key for your use.</p> </li> <li> <p>Give your key a name. Example: <code>griptape</code></p> <p></p> </li> <li> <p>Choose Create secret key</p> </li> <li> <p>You will see a window with your new key highlighted. You will not be able to view this key again so it's very important to copy the key and save it somewhere safe.</p> <p></p> </li> <li> <p>Choose Done</p> </li> </ol> <p>Warning</p> <p>Remember, this API key is like your secret key to the city of LLMs. Don't share it with anyone!</p>"},{"location":"setup/02_openai/#installing-python-dotenv","title":"Installing python-dotenv","text":"<p>Understanding and using environment variables is a key aspect of programming. In order to use the API key we just received, we will need to be able to access it from with our python script. We'll use a package called python-dotenv to handle environment variables in our project.</p> <p>In the terminal, run the command <code>pip install python-dotenv</code> to install the package.</p> <p></p>"},{"location":"setup/02_openai/#creating-the-env-file-and-setting-the-openai-api-key","title":"Creating the .env File and Setting the OpenAI API Key","text":"<p>Now that we have our OpenAI API key, we need to make it available for our Python code to use. The best and safest way to do this is using a <code>.env</code> file, which allows us to define environment variables. We can then use the <code>load_dotenv</code> library to access any of those environment variables..</p> <ol> <li>In the root of your project folder (<code>griptape-starter</code>), create a new file and name it <code>.env</code>.</li> <li>Open the <code>.env</code> file and write <code>OPENAI_API_KEY=your_openai_api_key_here</code>, replacing <code>your_openai_api_key_here</code> with your actual OpenAI API key.</li> <li>Save the file.</li> </ol> .env<pre><code>OPENAI_API_KEY=your_openai_api_key_here \n</code></pre>"},{"location":"setup/02_openai/#your-first-app","title":"Your first app","text":""},{"location":"setup/02_openai/#creating-apppy","title":"Creating app.py","text":"<p>Now we're going to create our Python file and use the <code>python-dotenv</code> library to load the <code>OPENAI_API_KEY</code> environment variable. First things first, let's create a Python file where we will write our code.</p> <ol> <li>In your project directory (<code>griptape-starter</code>), create a new file called <code>app.py</code>. You can do this in VS Code by clicking <code>File -&gt; New File</code></li> <li>Save the file by choosing <code>File -&gt; Save As...</code></li> <li>Entering <code>app.py</code> as the filename.</li> </ol> <p>Success</p> <p>Nice, you've created your first Python file! </p>"},{"location":"setup/02_openai/#importing-the-library","title":"Importing the Library","text":"<p>Next, we're going to import the <code>load_dotenv</code> function from the <code>dotenv</code> library we installed earlier.</p> <p>Enter the following code in app.py.</p> app.py<pre><code>from dotenv import load_dotenv\n</code></pre>"},{"location":"setup/02_openai/#loading-the-variables","title":"Loading the variables","text":"<p>Now we'll use the <code>load_dotenv</code> function. Update your <code>app.py</code> with the highlighted line: app.py<pre><code>from dotenv import load_dotenv\nload_dotenv() # Load the environment variables\n</code></pre></p> <p>If you save and run your script, you shouldn't get any errors in your Terminal. If you received no errors.. you win! You've loaded your environment variable that was specified in the <code>.env</code> file!</p>"},{"location":"setup/02_openai/#next-steps","title":"Next Steps","text":"<p>Congratulations! Your environment is set, and your application is ready. You're ready to start using Griptape! In the next section, we'll install Griptape and send our first message to the LLM. I wonder what it'll say...</p>"},{"location":"setup/03_griptape/","title":"Griptape","text":""},{"location":"setup/03_griptape/#overview","title":"Overview","text":"<p>Now that you've got your environment all set up, it's time to actually start moving. In this stage, we'll put together a basic Griptape application and see it in action. </p>"},{"location":"setup/03_griptape/#our-application","title":"Our Application","text":"<p>We are going to build a very simple application. It's going to simply take in a prompt, and return the result of that prompt. For example, we will be able to ask: \"What's a good place to visit in New Zealand?\" and it will give us an answer like \"Abel Tasman\" or \"All of it\".</p>"},{"location":"setup/03_griptape/#griptape","title":"Griptape","text":""},{"location":"setup/03_griptape/#agents","title":"Agents","text":"<p>There are multiple ways communicate with LLMs via Griptape, but the one we'll use in this example is an Agent. You can learn more about Agents in documentation, but here's a simple way to understand them:</p> <p>Abstract</p> <p>Agents can do one task.</p> <p>You give the Agent a prompt, it thinks for a bit, figures things out, and then returns a result. While that sounds relatively simple, it's actually quite cool. You can give the agent tools (WebScraper, Calculator, EmailClient, to name a few), you can give it rules about how to behave, and more. Agents can actually do quite a lot - but they're still one of the more simple ways of interacting with Griptape, which is why we'll use them to start with in this course.</p> <p>Speaking of interacting with Griptape... we need to install it!</p>"},{"location":"setup/03_griptape/#installing-griptape","title":"Installing Griptape","text":"<p>Just like we installed the <code>python_dotenv</code> library, we need to do the same with Griptape. </p> <p>Open your Terminal and use <code>pip</code> to install both <code>griptape</code> and <code>griptape-tools</code>:</p> <pre><code>pip install griptape griptape-tools\n</code></pre> <p>Info</p> <p>This will take a minute to install. Another chance to enjoy a !</p>"},{"location":"setup/03_griptape/#import-griptape","title":"Import Griptape","text":"<p>Now comes the moment you've all been waiting for! Actually, it's the moment before the moment. In this moment, we're going to import the Agent from the Griptape library. The moment after that is probably the one you're really waiting for. But we have to do this moment first. Live in the now.</p> <p>Modify your <code>app.py</code> to import the agent</p> app.py<pre><code>from dotenv import load_dotenv\nfrom griptape.structures import Agent\nload_dotenv() # Load the environment variables\n</code></pre> <p>As you can see, we're importing the Agent from <code>griptape.structures</code>. There are other structures we can work with, but again.. this is just setting up your environment. We'll talk about those in another course.</p>"},{"location":"setup/03_griptape/#the-fun-part","title":"The fun part","text":""},{"location":"setup/03_griptape/#create-the-agent","title":"Create the Agent","text":"<p>To create the Agent, we'll instantiate the class. </p> app.py<pre><code>from dotenv import load_dotenv\nfrom griptape.structures import Agent\nload_dotenv() # Load the environment variables\n# Create the Agent\nagent = Agent()\n</code></pre>"},{"location":"setup/03_griptape/#run-the-agent","title":"Run the Agent","text":"<p>Now you get to tell the Agent what to do. Use the Agent's <code>run</code> method to execute a prompt.</p> app.py<pre><code>from dotenv import load_dotenv\nfrom griptape.structures import Agent\nload_dotenv() # Load the environment variables\n# Create the Agent\nagent = Agent()\n# Run the agent\nagent.run(\"Give me a haiku about skateboarding\")\n</code></pre>"},{"location":"setup/03_griptape/#test-the-agent","title":"Test the Agent","text":"<p>Let's see if our application works.</p> <ol> <li>Save your file.</li> <li>Use the Run icon in the upper right corner of VS Code, or open your terminal and type <code>python app.py</code>.</li> </ol> <p>If everything has been set up correctly, you should see the result of the <code>agent.run()</code> command printed in the terminal. The exact output will depend on the current configuration and performance of the OpenAI API, but it should be a haiku about skateboarding.</p> <pre><code>[07/21/23 05:39:22] INFO     Task 801254fc5df64cda8930917a8afbc5bc                                              Input: Create me a haiku about skateboarding                                       [07/21/23 05:39:24] INFO     Task 801254fc5df64cda8930917a8afbc5bc                                              Output: Skateboard glides swiftly,                                                 Tricks and flips in the air, high,                                                 Thrilling ride, pure bliss.      </code></pre> <p>Success</p> <p>Congrats! You've taken the first push and created your first python script that works with a large language model!</p>"},{"location":"setup/03_griptape/#next-steps","title":"Next Steps","text":"<p>You've successfully set up your development environment, installed the necessary packages, obtained your OpenAI API key, and written and run a simple Griptape application. You've done a great job, so don't forget to celebrate your progress. </p> <p>Now that you've successfully completed the course, please check out these Helpful Resources to learn more about Griptape!</p>"},{"location":"setup/04_helpful_resources/","title":"Resources","text":"<p>Congrats on reaching this stage! You've set up your environment, written your first Griptape application, and are ready to embark on your coding journey. However, learning is an ongoing process, and the more resources you have at your disposal, the more empowered you'll be to tackle whatever comes your way.</p> <p>Here's a list of resources to help you gain momentum and build your knowledge:</p>"},{"location":"setup/04_helpful_resources/#griptape","title":"Griptape","text":"<ul> <li> <p>Griptape Documentation: Learn everything you need to know about Griptape from its official documentation. You'll find detailed explanations, ../assets/examples, and tips here. Visit the Griptape Documentation.</p> </li> <li> <p>Griptape GitHub: Check out the official Griptape repository on GitHub. You can look at the source code, report issues, and even contribute. Here's the Griptape GitHub link.</p> </li> <li> <p>Griptape Discord Community: Join the Griptape community on Discord. Here, you can connect with other users, ask questions, share your projects, and keep up-to-date with Griptape developments. Here's the Griptape Discord link.</p> </li> </ul>"},{"location":"setup/04_helpful_resources/#tools","title":"Tools","text":"<ul> <li> <p>Visual Studio Code: Brush up on your VS Code knowledge. Check out the VS Code Documentation to get familiar with its features and functionalities.</p> </li> <li> <p>Python: Python's official documentation is a comprehensive resource that covers all aspects of the language. Visit the Python Documentation.</p> </li> <li> <p>Python-dotenv: Get more information about how to use the python-dotenv package from its Python-dotenv PyPI page.</p> </li> <li> <p>OpenAI API: Understand how OpenAI's API works. The OpenAI API Documentation is a great place to start.</p> </li> </ul>"},{"location":"setup/04_helpful_resources/#additional-links","title":"Additional Links","text":"<ul> <li>Language Learning Models (LLMs): Get a broader understanding of LLMs and how they're revolutionizing the field of AI. Here are some useful links:</li> <li>What are Language Models?</li> <li>Language Learning Models Explained</li> </ul> <p>These resources will give you a deeper understanding and greater control as you navigate the landscape of programming with Python and Griptape. Happy coding!</p>"}]}